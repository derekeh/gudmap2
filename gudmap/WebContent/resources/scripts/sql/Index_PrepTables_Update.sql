DROP TABLE IF EXISTS SOLR_INF_PRESENT;
DROP TABLE IF EXISTS SOLR_INF_NOT_DETECTED;
DROP TABLE IF EXISTS SOLR_UNCERTAIN;
DROP TABLE IF EXISTS SOLR_PRESENT;
DROP TABLE IF EXISTS SOLR_NOT_DETECTED;

DROP TABLE IF EXISTS SOLR_FGS;

DROP TABLE IF EXISTS SOLR_MA_DETAILS;


DROP TABLE IF EXISTS SOLR_PLATFORMS;
DROP TABLE IF EXISTS SOLR_MA_GENES;
DROP TABLE IF EXISTS SOLR_MA_ASSAYS;
DROP TABLE IF EXISTS SOLR_PLAT_GENES;
DROP TABLE IF EXISTS SOLR_MA_GENES_2;


DROP TABLE IF EXISTS SOLR_IN_SITU_GENES;
DROP TABLE IF EXISTS SOLR_TS_EMAPIDS;
DROP TABLE IF EXISTS SOLR_MA_GENES_NOT_EXIST;
DROP TABLE IF EXISTS SOLR_GENES_INDEX;
DROP TABLE IF EXISTS SOLR_INSITU_DETAILS;
DROP TABLE IF EXISTS SOLR_INSITU_EXP;

DROP TABLE IF EXISTS SOLR_IMAGES;

DROP TABLE IF EXISTS SOLR_SEQ_DETAILS;

-- To get inferred present components
SET group_concat_max_len=15000;

CREATE TABLE SOLR_INF_PRESENT AS (select distinct SUB_OID AS ID,
GROUP_CONCAT(DISTINCT PARENT_NAME SEPARATOR ';') AS PARENTS,
GROUP_CONCAT(DISTINCT PARENT_EMAPA_ID SEPARATOR ';') AS PARENT_EMAPA_IDS,
GROUP_CONCAT(DISTINCT PARENT_EMAPS_ID SEPARATOR ';') AS PARENT_EMAPS_IDS
from ISH_SUBMISSION
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join EMAPA_ONTOLOGY_RELATIONS on CHILD_EMAPS_ID=EXP_COMPONENT_ID
where EXP_STRENGTH = 'present' AND SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_INF_PRESENT ADD PRIMARY KEY (ID), ENGINE = MyISAM;


-- To get inferred not detected components
SET group_concat_max_len=30000;

CREATE TABLE SOLR_INF_NOT_DETECTED AS (select distinct SUB_OID AS ID,
GROUP_CONCAT(DISTINCT CHILD_NAME SEPARATOR ';') AS CHILDREN,
GROUP_CONCAT(DISTINCT CHILD_EMAPA_ID SEPARATOR ';') AS CHILDREN_EMAPA_IDS,
GROUP_CONCAT(DISTINCT CHILD_EMAPS_ID SEPARATOR ';') AS CHILDREN_EMAPS_IDS
from ISH_SUBMISSION
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join EMAPA_ONTOLOGY_RELATIONS on PARENT_EMAPS_ID=EXP_COMPONENT_ID
where EXP_STRENGTH = 'not detected' AND SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_INF_NOT_DETECTED ADD PRIMARY KEY (ID), ENGINE = MyISAM;

-- To get uncertain components
CREATE TABLE SOLR_UNCERTAIN AS (select distinct SUB_OID AS ID,
GROUP_CONCAT(DISTINCT PARENT_NAME SEPARATOR ';') AS COMPONENTS,
GROUP_CONCAT(DISTINCT EXP_COMPONENT_ID SEPARATOR ';') AS EMAPS_IDS,
GROUP_CONCAT(DISTINCT PARENT_EMAPA_ID SEPARATOR ';') AS EMAPA_IDS,
GROUP_CONCAT(DISTINCT EXP_STRENGTH SEPARATOR ';') AS EXPRESSION,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',EXP_STRENGTH SEPARATOR ';') AS COMPONENT_EXPRESSION,
GROUP_CONCAT(DISTINCT PTN_PATTERN SEPARATOR ';') AS PATTERNS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',PTN_PATTERN SEPARATOR ';') AS COMPONENT_PATTERNS,
GROUP_CONCAT(DISTINCT EXP_ADDITIONAL_STRENGTH SEPARATOR ';') AS STRENGTHS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',EXP_ADDITIONAL_STRENGTH SEPARATOR ';') AS COMPONENT_STRENGTHS,
GROUP_CONCAT(DISTINCT ENT_VALUE SEPARATOR ';') AS EXPRESSION_NOTES,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',ENT_VALUE) AS COMPONENT_NOTES
from ISH_SUBMISSION
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join EMAPA_ONTOLOGY_RELATIONS on PARENT_EMAPS_ID=EXP_COMPONENT_ID
left join ISH_PATTERN on PTN_EXPRESSION_FK = EXP_OID
left join ISH_EXPRESSION_NOTE ON ENT_EXPRESSION_FK=EXP_OID
where EXP_STRENGTH = 'uncertain' AND SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_UNCERTAIN ADD PRIMARY KEY (ID), ENGINE = MyISAM;

-- To get present components
CREATE TABLE SOLR_PRESENT AS (select distinct SUB_OID AS ID,
GROUP_CONCAT(DISTINCT PARENT_NAME SEPARATOR ';') AS COMPONENTS,
GROUP_CONCAT(DISTINCT EXP_COMPONENT_ID SEPARATOR ';') AS EMAPS_IDS,
GROUP_CONCAT(DISTINCT PARENT_EMAPA_ID SEPARATOR ';') AS EMAPA_IDS,
GROUP_CONCAT(DISTINCT EXP_STRENGTH SEPARATOR ';') AS EXPRESSION,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',EXP_STRENGTH SEPARATOR ';') AS COMPONENT_EXPRESSION,
GROUP_CONCAT(DISTINCT IF (EXP_ADDITIONAL_STRENGTH !='',EXP_ADDITIONAL_STRENGTH,NULL) SEPARATOR ';') AS STRENGTHS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',IF (EXP_ADDITIONAL_STRENGTH !='',EXP_ADDITIONAL_STRENGTH,NULL) SEPARATOR ';') AS COMPONENT_STRENGTHS,
GROUP_CONCAT(DISTINCT DEN_COMPONENT_ID,':', DEN_RELATIVE_TO_TOTAL SEPARATOR ';') AS DENSITY_COMP_REL_TOTAL,
GROUP_CONCAT(DISTINCT DEN_RELATIVE_TO_TOTAL SEPARATOR ';') AS DENSITY_REL_TOTAL,
GROUP_CONCAT(DISTINCT DEN_COMPONENT_ID,':',DEN_RELATIVE_TO_AGE,':',DEN_DIRECTION_CHANGE,':',DEN_MAGNITUDE_CHANGE SEPARATOR ';') AS DENSITY_COMP_REL_AGE,
GROUP_CONCAT(DISTINCT DEN_RELATIVE_TO_AGE,':',DEN_DIRECTION_CHANGE,':',DEN_MAGNITUDE_CHANGE SEPARATOR ';') AS DENSITY_REL_AGE,
GROUP_CONCAT(DISTINCT DNN_VALUE SEPARATOR ';') AS DENSITY_NOTES,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',DNN_VALUE SEPARATOR ';') AS DENSITY_COMP_NOTES,
GROUP_CONCAT(DISTINCT IF (PTN_PATTERN !='',PTN_PATTERN,NULL) SEPARATOR ';') AS PATTERNS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',IF (PTN_PATTERN !='',PTN_PATTERN,NULL) SEPARATOR ';') AS COMPONENT_PATTERNS,
GROUP_CONCAT(DISTINCT IF (LCN_LOCATION !='',LCN_LOCATION,NULL) SEPARATOR ';') AS LOCATIONS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',IF (PTN_PATTERN !='',PTN_PATTERN,NULL),':',IF (LCN_LOCATION !='',LCN_LOCATION,NULL) SEPARATOR ';') AS COMPONENT_PATTERN_LOCATIONS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':','strength:',IF (EXP_ADDITIONAL_STRENGTH !='',EXP_ADDITIONAL_STRENGTH,'unspecified'),':','pattern:',IF (PTN_PATTERN !='',PTN_PATTERN,'na'),':','location:',IF (LCN_LOCATION !='',LCN_LOCATION,'na') SEPARATOR ';') AS COMPONENT_ANNOTATION,
GROUP_CONCAT(DISTINCT ENT_VALUE SEPARATOR ';') AS EXPRESSION_NOTES,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',ENT_VALUE) AS COMPONENT_NOTES
from ISH_SUBMISSION
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join EMAPA_ONTOLOGY_RELATIONS on PARENT_EMAPS_ID=EXP_COMPONENT_ID
left join ISH_DENSITY ON DEN_EXPRESSION_FK=EXP_OID
left join ISH_DENSITY_NOTE ON DNN_DENSITY_FK=DEN_OID
left join ISH_PATTERN on PTN_EXPRESSION_FK = EXP_OID
left join ISH_LOCATION on LCN_PATTERN_FK = PTN_OID
left join ISH_EXPRESSION_NOTE ON ENT_EXPRESSION_FK=EXP_OID
where EXP_STRENGTH = 'present' AND SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_PRESENT ADD PRIMARY KEY (ID), ENGINE = MyISAM;

-- To get not detected components
CREATE TABLE SOLR_NOT_DETECTED AS (select distinct SUB_OID AS ID,
GROUP_CONCAT(DISTINCT PARENT_NAME SEPARATOR ';') AS COMPONENTS,
GROUP_CONCAT(DISTINCT EXP_COMPONENT_ID SEPARATOR ';') AS EMAPS_IDS,
GROUP_CONCAT(DISTINCT PARENT_EMAPA_ID SEPARATOR ';') AS EMAPA_IDS,
GROUP_CONCAT(DISTINCT EXP_STRENGTH SEPARATOR ';') AS EXPRESSION,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',EXP_STRENGTH SEPARATOR ';') AS COMPONENT_EXPRESSION,
GROUP_CONCAT(DISTINCT PTN_PATTERN SEPARATOR ';') AS PATTERNS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',PTN_PATTERN SEPARATOR ';') AS COMPONENT_PATTERNS,
GROUP_CONCAT(DISTINCT EXP_ADDITIONAL_STRENGTH SEPARATOR ';') AS STRENGTHS,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',EXP_ADDITIONAL_STRENGTH SEPARATOR ';') AS COMPONENT_STRENGTHS,
GROUP_CONCAT(DISTINCT ENT_VALUE SEPARATOR ';') AS EXPRESSION_NOTES,
GROUP_CONCAT(DISTINCT PARENT_NAME,':',ENT_VALUE) AS COMPONENT_NOTES
from ISH_SUBMISSION
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join EMAPA_ONTOLOGY_RELATIONS on PARENT_EMAPS_ID=EXP_COMPONENT_ID
left join ISH_PATTERN on PTN_EXPRESSION_FK = EXP_OID
left join ISH_EXPRESSION_NOTE ON ENT_EXPRESSION_FK=EXP_OID
where EXP_STRENGTH = 'not detected' AND SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_NOT_DETECTED ADD PRIMARY KEY (ID), ENGINE = MyISAM;

-- To build focus groups temp table
-- changes 7-11-13 to make for all annotation, not just present
CREATE TABLE SOLR_FGS AS (select SUB_OID AS ID,
GROUP_CONCAT(DISTINCT REPLACE(FGS_NAME,'lower urinary tract','lower urinary tract; LUT') SEPARATOR ';') AS FG_NAMES
from ISH_SUBMISSION
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join EMAPA_ONTOLOGY_RELATIONS on CHILD_EMAPS_ID=EXP_COMPONENT_ID
left join REF_FG_EMAPS_IDS on PARENT_EMAPS_ID=FGE_EMAPS_ID
left join REF_FOCUS_GROUPS on FGE_FG_FK=FGS_OID
where SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 GROUP BY ID);
 ALTER TABLE SOLR_FGS ADD PRIMARY KEY (ID), ENGINE = MyISAM;

-- microarray sample table
CREATE TABLE SOLR_MA_DETAILS AS (select REPLACE (SUB_ACCESSION_ID,"GUDMAP:","") AS GUDMAP,
SUB_ACCESSION_ID AS GUDMAP_ID,
/*Platform*/
PLT_GEO_ID AS PLATFORM_GEO_ID,
PLT_TITLE AS PLATFORM_TITLE,
PLT_NAME AS PLATFORM_NAME,
/*Sample*/
SMP_GEO_ID AS SAMPLE_GEO_ID,
SMP_STRAIN AS SAMPLE_STRAIN,
SMP_SEX AS SAMPLE_SEX,
SMP_DEVELOPMENT_STAGE AS DEVELOPMENT_STAGE,
SMP_THEILER_STAGE AS SAMPLE_THEILER_STAGE,
SMP_MOLECULE AS SAMPLE_MOLECULE,
SMP_RNA_EXTRACT_PROTOCOL AS SAMPLE_RNA_EXTRACT_PROTOCOL,
SMP_DISSECT_METHOD AS SAMPLE_DISSECTION_METHOD,
SMP_EXPERIMENTAL_DESIGN AS SAMPLE_EXPERIMENTAL_DESIGN,
SMP_ARY_HYB_PROTOCOL AS SAMPLE_ARRAY_HYB_PROTOCOL,
SMP_DATA_ANA_METHOD AS SAMPLE_DATA_ANALYSIS_METHOD,
SMP_REFERENCE_USED AS SAMPLE_REFERENCE_USED,
SMP_TGT_AMP_MANUFACTURER AS SAMPLE_TARGET_AMPLIFICATION_MANUFACTURER,
SMP_SCAN_PROTOCOL AS SAMPLE_SCAN_PROTOCOL,
SMP_LABEL_PROTOCOL AS SAMPLE_LABEL_PROTOCOL,
/*Series*/
SER_GEO_ID AS SERIES_GEO_ID,
SER_TITLE AS SERIES_TITLE,
/*Anatomy*/
GROUP_CONCAT(DISTINCT ANO_COMPONENT_NAME SEPARATOR ';') AS COMPONENT,
substring(ATN_PUBLIC_ID,6) AS EMAP,
/*Lab*/
IF ((SELECT COUNT(*) FROM REF_SUBMISSION_PERSON_GRP WHERE SPG_SUBMISSION_FK = SUB_OID) > 0, (SELECT GRP_DESCRIPTION FROM REF_GROUP JOIN REF_SUBMISSION_PERSON_GRP ON SPG_GROUP_FK = GRP_OID WHERE SPG_SUBMISSION_FK = SUB_OID), PER_SURNAME) AS PI_NAME,
PER_LAB AS LAB,
SUB_SOURCE AS SOURCE,
SUB_SUB_DATE AS DATE,

STG_STAGE_DISPLAY AS STAGE,

/*Specimen*/
SPN_ASSAY_TYPE AS SPECIMEN_ASSAY_TYPE,
SPN_FIXATION_METHOD AS FIXATION_METHOD,
SPN_STRAIN AS STRAIN,
SPN_SEX AS SEX,
TRIM(CASE SPN_STAGE_FORMAT WHEN 'dpc' THEN CONCAT(SPN_STAGE,' ',SPN_STAGE_FORMAT) WHEN 'P' THEN CONCAT('P',SPN_STAGE) ELSE CONCAT(SPN_STAGE_FORMAT,SPN_STAGE) END) AS DEV_STAGE,
SPN_STAGE_FORMAT AS STAGE_FORMAT,
(CASE WHEN SPN_WILDTYPE='true' THEN 'Wild Type' WHEN SPN_WILDTYPE='false' THEN 'Non-wild Type' ELSE '' END) AS GENOTYPE,
GROUP_CONCAT(DISTINCT SAL_FIRST_CHROM) AS FIRST_CHROMATID,
GROUP_CONCAT(DISTINCT SAL_SECOND_CHROM) AS SECOND_CHROMATID,
GROUP_CONCAT(DISTINCT ALE_MGI_ALLELE_ID) AS ALLELE_MGI_ID,
GROUP_CONCAT(DISTINCT ALE_LAB_NAME_ALLELE) AS ALLELE_LAB_NAME,
GROUP_CONCAT(DISTINCT ALE_ALLELE_NAME) AS ALLELE_NAME,
GROUP_CONCAT(DISTINCT ALE_TYPE) AS ALLELE_TYPE,
STG_SPECIES AS SPECIES
from ISH_SUBMISSION
left join REF_STAGE on SUB_STAGE_FK=STG_OID
left join MIC_SAMPLE on SMP_SUBMISSION_FK=SUB_OID
left join MIC_SERIES_SAMPLE on SRM_SAMPLE_FK=SMP_OID
left join MIC_SERIES on SRM_SERIES_FK=SER_OID
left join MIC_PLATFORM on SER_PLATFORM_FK=PLT_OID
left join ISH_EXPRESSION on EXP_SUBMISSION_FK=SUB_OID
left join ANA_TIMED_NODE on ATN_PUBLIC_ID=EXP_COMPONENT_ID
left join ANA_NODE on ATN_NODE_FK = ANO_OID
left join ISH_PERSON on SUB_PI_FK=PER_OID
left join ISH_SPECIMEN on SPN_SUBMISSION_FK=SUB_OID
left join LNK_SUB_ALLELE on SUB_OID=SAL_SUBMISSION_FK
left join ISH_ALLELE on SAL_ALE_OID_FK=ALE_OID
where SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 AND SUB_ASSAY_TYPE = 'microarray' GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_MA_DETAILS ADD PRIMARY KEY (GUDMAP), ENGINE = MyISAM;

-- platform temp table
CREATE TABLE SOLR_PLATFORMS AS (SELECT PLT_GEO_ID AS PLATFORM_ID, GROUP_CONCAT(DISTINCT SMP_SUBMISSION_FK SEPARATOR ';') AS GUDMAP_IDS_ONLY, GROUP_CONCAT('GUDMAP:',SMP_SUBMISSION_FK SEPARATOR ';') AS GUDMAP_IDS FROM MIC_PLATFORM LEFT JOIN MIC_SERIES ON PLT_OID=SER_PLATFORM_FK
 LEFT JOIN MIC_SERIES_SAMPLE ON SER_OID=SRM_SERIES_FK
 LEFT JOIN MIC_SAMPLE ON SRM_SAMPLE_FK=SMP_OID GROUP BY PLT_GEO_ID);
ALTER TABLE SOLR_PLATFORMS ADD PRIMARY KEY (PLATFORM_ID), ENGINE = MyISAM;

-- ma genes temp table




CREATE TABLE SOLR_MA_GENES AS (
SELECT MAN_GENE_SYMBOL AS MA_GENE, GROUP_CONCAT(DISTINCT GUDMAP_IDS_ONLY) AS MA_GUDMAP, GROUP_CONCAT(DISTINCT GUDMAP_IDS) AS MA_GUDMAP_IDS,
GROUP_CONCAT(DISTINCT MAN_PROBE_SET_ID SEPARATOR ';') AS PROBESETS, RMM_MGIACC AS MGI_GENE_ID, GROUP_CONCAT(DISTINCT RSY_SYNONYM SEPARATOR ';') AS SYNONYMS,
 MAN_GENE_DESC AS GENE_NAME, MAN_ENS_GENE_ID AS ENSEMBL_ID, MAN_ENTREZ_GENE_ID AS ENTREZ_ID FROM MIC_ANAL_ANNOTATION LEFT JOIN REF_MGI_MRK ON MAN_GENE_SYMBOL=RMM_SYMBOL LEFT JOIN REF_SYNONYM on RSY_REF=RMM_ID LEFT JOIN SOLR_PLATFORMS ON MAN_PLATFORM_ID=PLATFORM_ID GROUP BY MAN_GENE_SYMBOL);
 ALTER TABLE SOLR_MA_GENES ADD INDEX SOLR_MA_GENES_MA_GENE_IDX (MA_GENE), ENGINE = MyISAM;


-- 3 table to help construct the microarray index
CREATE TABLE SOLR_MA_ASSAYS AS (SELECT SMP_SUBMISSION_FK AS MAA_GUDMAP_ID, PLT_GEO_ID AS MAA_PLATFORM_ID FROM MIC_SAMPLE LEFT JOIN MIC_SERIES_SAMPLE ON SRM_SAMPLE_FK=SMP_OID LEFT JOIN MIC_SERIES ON SER_OID=SRM_SERIES_FK LEFT JOIN MIC_PLATFORM ON PLT_OID=SER_PLATFORM_FK);
 ALTER TABLE SOLR_MA_ASSAYS ADD PRIMARY KEY (MAA_GUDMAP_ID), ENGINE = MyISAM;

SET group_concat_max_len=500000;
 
CREATE TABLE SOLR_PLAT_GENES AS (SELECT MAN_PLATFORM_ID AS SPG_PLATFORM_ID, GROUP_CONCAT(DISTINCT MAN_GENE_SYMBOL SEPARATOR ';') AS PLAT_GENES, GROUP_CONCAT(DISTINCT MAN_MGI_ID SEPARATOR ';') AS PLAT_MGI_IDS, GROUP_CONCAT(DISTINCT REPLACE(MAN_MGI_ID,'MGI:','') SEPARATOR ';') AS PLAT_MGI FROM MIC_ANAL_ANNOTATION GROUP BY MAN_PLATFORM_ID);
ALTER TABLE SOLR_PLAT_GENES ADD PRIMARY KEY (SPG_PLATFORM_ID), ENGINE = MyISAM;

-- this gives all genes that are used by each gudmap ID (microarray). 
-- doesn't include data from GPL81 and GPL339 (gudmap series 7,8,9)
CREATE TABLE SOLR_MA_GENES_2 AS (SELECT MAA_GUDMAP_ID, PLAT_GENES AS MAG2_GENES, PLAT_MGI_IDS AS MAG2_MGI_IDS, PLAT_MGI AS MAG2_MGI FROM SOLR_MA_ASSAYS LEFT JOIN SOLR_PLAT_GENES ON MAA_PLATFORM_ID=SPG_PLATFORM_ID GROUP BY MAA_GUDMAP_ID);
ALTER TABLE SOLR_MA_GENES_2 ADD PRIMARY KEY (MAA_GUDMAP_ID), ENGINE = MyISAM;

-- to get in-situ genes temp table
CREATE TABLE SOLR_IN_SITU_GENES AS (SELECT 
RPR_SYMBOL AS GENE,
RPR_NAME AS GENE_NAME,
GROUP_CONCAT(DISTINCT RSY_SYNONYM SEPARATOR ';') AS SYNONYMS,
RPR_GENBANK AS GENBANK_ID,
RPR_ENSEMBL AS ENSEMBL_ID,
GROUP_CONCAT(DISTINCT RPR_OID SEPARATOR ';') AS maprobe,
GROUP_CONCAT(DISTINCT CONCAT("maprobe:",RPR_OID) SEPARATOR ';') AS MAPROBE_ID,
RPR_LOCUS_TAG AS MGI_GENE_ID,
CONCAT_WS(";", GROUP_CONCAT(DISTINCT REPLACE (RPR_LOCUS_TAG,"MGI:","")),GROUP_CONCAT(DISTINCT REPLACE (ALE_MGI_ALLELE_ID,"MGI:","")),GROUP_CONCAT(DISTINCT CASE WHEN SUBSTRING(RPR_JAX_ACC,1,4)='MGI:' THEN REPLACE(RPR_JAX_ACC,'MGI:','') END) ) AS MGI,
GROUP_CONCAT(DISTINCT RPR_JAX_ACC SEPARATOR ';') AS PROBE_ID, 
GROUP_CONCAT(DISTINCT RPR_MTF_JAX SEPARATOR ';') AS PROBE_NAME_MTF_JAX,
GROUP_CONCAT(DISTINCT PRB_CLONE_NAME SEPARATOR ';') AS PROBE_CLONE_NAME,
GROUP_CONCAT(DISTINCT ALE_LAB_NAME_ALLELE SEPARATOR ';') AS LAB_ALLELE_NAME,
GROUP_CONCAT(DISTINCT ALE_ALLELE_NAME SEPARATOR ';') AS ALLELE_NAME,
GROUP_CONCAT(DISTINCT SUB_ACCESSION_ID SEPARATOR ';') AS GUDMAP_IDS,
GROUP_CONCAT(DISTINCT REPLACE (SUB_ACCESSION_ID,'GUDMAP:','') SEPARATOR ';') AS GUDMAP,
GROUP_CONCAT(DISTINCT SOLR_PRESENT.COMPONENTS,';',SOLR_INF_PRESENT.PARENTS,';',SOLR_PRESENT.EMAPS_IDS,';',SOLR_INF_PRESENT.PARENT_EMAPS_IDS) AS PRESENT,
GROUP_CONCAT(DISTINCT SOLR_PRESENT.COMPONENTS,';',SOLR_PRESENT.EMAPS_IDS,';',SOLR_PRESENT.EMAPA_IDS) AS DIR_PRESENT,
GROUP_CONCAT(DISTINCT SOLR_NOT_DETECTED.COMPONENTS,';',SOLR_NOT_DETECTED.EMAPS_IDS,';',SOLR_NOT_DETECTED.EMAPA_IDS) AS NOT_DETECTED,
GROUP_CONCAT(DISTINCT SOLR_UNCERTAIN.COMPONENTS,';',SOLR_UNCERTAIN.EMAPS_IDS) AS UNCERTAIN,
GROUP_CONCAT(DISTINCT REPLACE (SOLR_PRESENT.EMAPS_IDS,'EMAPS:',''),';',REPLACE (SOLR_INF_PRESENT.PARENT_EMAPS_IDS,'EMAPS:',''),';',REPLACE (SOLR_NOT_DETECTED.EMAPS_IDS,'EMAPS:',''),';',REPLACE (SOLR_UNCERTAIN.EMAPS_IDS,'EMAPS:','')) AS EMAPS,
GROUP_CONCAT(DISTINCT SUB_SOURCE SEPARATOR ';') AS SOURCE,
GROUP_CONCAT(DISTINCT PER_SURNAME SEPARATOR ';') AS PI_NAME,
GROUP_CONCAT(DISTINCT PER_LAB SEPARATOR ';') AS LAB, 
ANC_IS_ANCHOR AS ANCHOR, 
ANC_IS_MARKER AS MARKER,
IF(ANC_IS_ANCHOR = '1', 'anchor', IF(ANC_IS_MARKER = '1', 'marker', "")) as GENE_TYPE,
STG_SPECIES AS SPECIES 
FROM ISH_SUBMISSION 
LEFT JOIN ISH_PROBE ON SUB_OID=PRB_SUBMISSION_FK 
LEFT JOIN REF_PROBE ON PRB_MAPROBE=RPR_OID 
left join REF_STAGE on SUB_STAGE_FK=STG_OID
left join REF_MGI_MRK on RMM_MGIACC = RPR_LOCUS_TAG
left join REF_SYNONYM on RSY_REF=RMM_ID
left join SOLR_PRESENT on SOLR_PRESENT.ID=SUB_OID
left join SOLR_INF_PRESENT on SOLR_INF_PRESENT.ID=SUB_OID
left join SOLR_NOT_DETECTED on SOLR_NOT_DETECTED.ID=SUB_OID
left join SOLR_INF_NOT_DETECTED on SOLR_INF_NOT_DETECTED.ID=SUB_OID
left join SOLR_UNCERTAIN on SOLR_UNCERTAIN.ID=SUB_OID
left join REF_ANCHOR_GENES on RPR_SYMBOL=ANC_GENE_SYMBOL
LEFT join ISH_PERSON on SUB_PI_FK=PER_OID
-- join ISH_PERSON on SUB_PI_FK=PER_OID
left join LNK_SUB_ALLELE ON SAL_SUBMISSION_FK=SUB_OID 
LEFT JOIN ISH_ALLELE ON SAL_ALE_OID_FK=ALE_OID
where SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 AND SUB_ASSAY_TYPE != 'Microarray' AND SUB_ASSAY_TYPE !='NextGen' GROUP BY RPR_SYMBOL);
ALTER TABLE SOLR_IN_SITU_GENES ADD INDEX SOLR_IN_SITU_GENES_GENE_IDX (GENE), ENGINE = MyISAM;

-- to get tissue summary info
CREATE TABLE SOLR_TS_EMAPIDS AS (SELECT CSC_OID AS TS_ID, 
CSC_DISPLAY_NAME, 
GROUP_CONCAT(DISTINCT RPR_SYMBOL ORDER BY RPR_SYMBOL SEPARATOR ';') AS TS_GENE, 
GROUP_CONCAT(DISTINCT RPR_LOCUS_TAG ORDER BY RPR_LOCUS_TAG SEPARATOR ';') AS TS_MGI_IDS,
GROUP_CONCAT(DISTINCT RPR_JAX_ACC ORDER BY RPR_JAX_ACC SEPARATOR ';') AS TS_PROBE_IDS,
GROUP_CONCAT(DISTINCT (CONCAT('maprobe:',RPR_OID)) ORDER BY RPR_OID SEPARATOR ';') AS TS_MAPROBES, 
GROUP_CONCAT(DISTINCT EXP_SUBMISSION_FK ORDER BY EXP_SUBMISSION_FK SEPARATOR ';') AS TS_GUDMAP_IDS,
GROUP_CONCAT(DISTINCT STAGE ORDER BY STAGE SEPARATOR ';') AS TS_THEILER_STAGE, 
GROUP_CONCAT(DISTINCT CHILD_EMAPS_ID ORDER BY CHILD_EMAPS_ID ASC SEPARATOR ';') AS TS_EMAP_IDS, 
GROUP_CONCAT(DISTINCT CHILD_NAME ORDER BY CHILD_NAME ASC SEPARATOR ';') AS TS_COMP_NAMES, 
GROUP_CONCAT(DISTINCT AGE_EMAPA_ID SEPARATOR ';') AS TS_EMAPA_IDS
FROM CPS_COMPONENTS
LEFT JOIN LNK_TS_EMAPA ON CSC_OID=AGE_CS_ID
LEFT JOIN ANA_NODE ON AGE_EMAPA_ID=ANA_NODE.ANO_PUBLIC_ID
LEFT JOIN ANA_TIMED_NODE ON ANA_NODE.ANO_OID = ANA_TIMED_NODE.ATN_NODE_FK
LEFT JOIN EMAPA_ONTOLOGY_RELATIONS ON ANA_TIMED_NODE.ATN_PUBLIC_ID = PARENT_EMAPS_ID
LEFT JOIN ISH_EXPRESSION ON EXP_COMPONENT_ID=CHILD_EMAPS_ID AND EXP_STRENGTH = 'present'
LEFT JOIN ISH_SUBMISSION ON EXP_SUBMISSION_FK=SUB_OID AND SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 
left join ISH_PROBE on SUB_OID=PRB_SUBMISSION_FK
left join REF_PROBE ON PRB_MAPROBE=RPR_OID 
GROUP BY CSC_OID);
ALTER TABLE SOLR_TS_EMAPIDS ADD PRIMARY KEY (TS_ID), ENGINE = MyISAM;
-- create all temporary tables first.

-- combine genes only in microarray with in situ genes

CREATE TABLE SOLR_MA_GENES_NOT_EXIST AS (SELECT * FROM SOLR_MA_GENES WHERE NOT EXISTS (SELECT * FROM SOLR_IN_SITU_GENES WHERE SOLR_IN_SITU_GENES.GENE = SOLR_MA_GENES.MA_GENE));
-- INSERT INTO SOLR_IN_SITU_GENES (GENE) SELECT MA_GENE FROM SOLR_MA_GENES_NOT_EXIST;
INSERT INTO SOLR_IN_SITU_GENES SELECT MA_GENE,GENE_NAME,SYNONYMS,NULL,ENSEMBL_ID,NULL,NULL,MGI_GENE_ID,NULL,NULL,NULL,NULL,NULL,NULL,MA_GUDMAP_IDS,MA_GUDMAP,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,"",NULL FROM SOLR_MA_GENES_NOT_EXIST;
-- build new index on core data shared between in situ and microrray genes (symbol, name, synonyms, ensembl ID, mgi ID, gene name).

CREATE TABLE SOLR_GENES_INDEX AS (SELECT SOLR_MA_GENES.MA_GENE AS MA_GENE, SOLR_MA_GENES.PROBESETS, SOLR_MA_GENES.MGI_GENE_ID AS MA_MGI_GENE_ID, SOLR_MA_GENES.SYNONYMS AS MA_SYNONYMS, SOLR_MA_GENES.GENE_NAME AS MA_GENE_NAME, SOLR_MA_GENES.ENSEMBL_ID AS MA_ENSEMBL_ID, SOLR_IN_SITU_GENES.GENE AS IN_GENE, SOLR_IN_SITU_GENES.SYNONYMS AS IN_SYNONYMS, SOLR_IN_SITU_GENES.MGI_GENE_ID AS IN_MGI_GENE_ID, SOLR_IN_SITU_GENES.GENE_NAME AS IN_GENE_NAME, SOLR_IN_SITU_GENES.ENSEMBL_ID AS IN_ENSEMBL_ID, SOLR_IN_SITU_GENES.SOURCE FROM SOLR_MA_GENES RIGHT JOIN SOLR_IN_SITU_GENES ON (MA_GENE=GENE));

-- add new columns to merge core data 
ALTER TABLE SOLR_GENES_INDEX ADD COLUMN GENE varchar (50);
ALTER TABLE SOLR_GENES_INDEX ADD COLUMN GENE_NAME varchar (250);
ALTER TABLE SOLR_GENES_INDEX ADD COLUMN MGI_GENE_ID varchar (50);
ALTER TABLE SOLR_GENES_INDEX ADD COLUMN MGI varchar (50);
ALTER TABLE SOLR_GENES_INDEX ADD COLUMN ENSEMBL_ID varchar (50);
ALTER TABLE SOLR_GENES_INDEX ADD COLUMN SYNONYMS varchar (500);
ALTER TABLE SOLR_GENES_INDEX ADD GENE_ID INT PRIMARY KEY AUTO_INCREMENT;


-- update new columns with merged data - precendence given to named symbols, names and IDs from insitu tables
UPDATE SOLR_GENES_INDEX SET GENE = IN_GENE WHERE IN_GENE=MA_GENE;
UPDATE SOLR_GENES_INDEX SET GENE = IN_GENE WHERE IN_GENE IS NOT NULL AND MA_GENE IS NULL;
UPDATE SOLR_GENES_INDEX SET GENE = IN_GENE WHERE IN_GENE !='' AND MA_GENE='';
UPDATE SOLR_GENES_INDEX SET GENE = MA_GENE WHERE MA_GENE IS NOT NULL AND IN_GENE IS NULL;
UPDATE SOLR_GENES_INDEX SET GENE = MA_GENE WHERE MA_GENE !='' AND IN_GENE='';

UPDATE SOLR_GENES_INDEX SET MGI_GENE_ID = IN_MGI_GENE_ID WHERE IN_MGI_GENE_ID=MA_MGI_GENE_ID;
UPDATE SOLR_GENES_INDEX SET MGI_GENE_ID = IN_MGI_GENE_ID WHERE IN_MGI_GENE_ID IS NOT NULL AND MA_MGI_GENE_ID IS NULL;
UPDATE SOLR_GENES_INDEX SET MGI_GENE_ID = IN_MGI_GENE_ID WHERE IN_MGI_GENE_ID !='' AND MA_MGI_GENE_ID='';
UPDATE SOLR_GENES_INDEX SET MGI_GENE_ID = MA_MGI_GENE_ID WHERE MA_MGI_GENE_ID IS NOT NULL AND IN_MGI_GENE_ID IS NULL;
UPDATE SOLR_GENES_INDEX SET MGI_GENE_ID = MA_MGI_GENE_ID WHERE MA_MGI_GENE_ID !='' AND IN_MGI_GENE_ID='';
UPDATE SOLR_GENES_INDEX SET MGI = REPLACE (MGI_GENE_ID,'MGI:','');

UPDATE SOLR_GENES_INDEX SET ENSEMBL_ID = IN_ENSEMBL_ID WHERE IN_ENSEMBL_ID=MA_ENSEMBL_ID;
UPDATE SOLR_GENES_INDEX SET ENSEMBL_ID = IN_ENSEMBL_ID WHERE IN_ENSEMBL_ID IS NOT NULL AND MA_ENSEMBL_ID IS NULL;
UPDATE SOLR_GENES_INDEX SET ENSEMBL_ID = IN_ENSEMBL_ID WHERE IN_ENSEMBL_ID !='' AND MA_ENSEMBL_ID='';
UPDATE SOLR_GENES_INDEX SET ENSEMBL_ID = MA_ENSEMBL_ID WHERE MA_ENSEMBL_ID IS NOT NULL AND IN_ENSEMBL_ID IS NULL;
UPDATE SOLR_GENES_INDEX SET ENSEMBL_ID = MA_ENSEMBL_ID WHERE MA_ENSEMBL_ID !='' AND IN_ENSEMBL_ID='';

UPDATE SOLR_GENES_INDEX SET SYNONYMS = IN_SYNONYMS WHERE IN_SYNONYMS=MA_SYNONYMS;
UPDATE SOLR_GENES_INDEX SET SYNONYMS = IN_SYNONYMS WHERE IN_SYNONYMS IS NOT NULL AND MA_SYNONYMS IS NULL;
UPDATE SOLR_GENES_INDEX SET SYNONYMS = IN_SYNONYMS WHERE IN_SYNONYMS !='' AND MA_SYNONYMS='';
UPDATE SOLR_GENES_INDEX SET SYNONYMS = MA_SYNONYMS WHERE MA_SYNONYMS IS NOT NULL AND IN_SYNONYMS IS NULL;
UPDATE SOLR_GENES_INDEX SET SYNONYMS = MA_SYNONYMS WHERE MA_SYNONYMS !='' AND IN_SYNONYMS='';

UPDATE SOLR_GENES_INDEX SET GENE_NAME = IN_GENE_NAME WHERE IN_GENE_NAME=MA_GENE_NAME;
UPDATE SOLR_GENES_INDEX SET GENE_NAME = IN_GENE_NAME WHERE IN_GENE_NAME IS NOT NULL AND MA_GENE_NAME IS NULL;
UPDATE SOLR_GENES_INDEX SET GENE_NAME = IN_GENE_NAME WHERE IN_GENE_NAME !='' AND MA_GENE_NAME='';
UPDATE SOLR_GENES_INDEX SET GENE_NAME = MA_GENE_NAME WHERE MA_GENE_NAME IS NOT NULL AND IN_GENE_NAME IS NULL;
UPDATE SOLR_GENES_INDEX SET GENE_NAME = MA_GENE_NAME WHERE MA_GENE_NAME !='' AND IN_GENE_NAME='';

-- drop all columns except the newly merged ones
ALTER TABLE SOLR_GENES_INDEX DROP IN_GENE, DROP IN_MGI_GENE_ID, DROP IN_GENE_NAME, DROP IN_SYNONYMS, DROP IN_ENSEMBL_ID, DROP MA_GENE, DROP MA_MGI_GENE_ID, DROP MA_SYNONYMS, DROP MA_ENSEMBL_ID, DROP MA_GENE_NAME;
ALTER TABLE SOLR_GENES_INDEX DROP PROBESETS, DROP SOURCE;

-- MODS TO TABLE

ALTER TABLE SOLR_GENES_INDEX ADD OMIM VARCHAR(50);
UPDATE SOLR_GENES_INDEX SET OMIM = (SELECT COUNT(DISTINCT DGA_OMIMID) FROM LNK_GENE_OMIMDIS WHERE DGA_MGIACC = MGI_GENE_ID);

ALTER TABLE SOLR_GENES_INDEX ADD ARRAY_RANGE VARCHAR(250);
-- TAKES APPROX 50MINS
UPDATE SOLR_GENES_INDEX SET ARRAY_RANGE = (SELECT CONCAT(MIN(STG_ORDER),'-', MAX(STG_ORDER)) FROM MIC_BROWSE_CACHE JOIN REF_STAGE ON STG_OID = MBC_SUB_STAGE_FK WHERE  MBC_MAN_MGI_ID = MGI_GENE_ID);

ALTER TABLE SOLR_GENES_INDEX ADD ISH_RANGE VARCHAR(250);
UPDATE SOLR_GENES_INDEX SET ISH_RANGE = (SELECT CONCAT(MIN(STG_ORDER),'-', MAX(STG_ORDER)) FROM ISH_SUBMISSION, REF_STAGE, ISH_PROBE,REF_PROBE WHERE STG_OID = SUB_STAGE_FK AND PRB_SUBMISSION_FK=SUB_OID AND PRB_MAPROBE=RPR_OID AND RPR_LOCUS_TAG = MGI_GENE_ID);

-- create indexes
CREATE INDEX SOLR_GENES_INDEX_GENE_IDX ON SOLR_GENES_INDEX (GENE);


ALTER TABLE SOLR_GENES_INDEX ENGINE = MyISAM;

SET group_concat_max_len=15000;

CREATE TABLE SOLR_INSITU_DETAILS AS (select 
distinct REPLACE (SUB_ACCESSION_ID,"GUDMAP:","") AS GUDMAP,
SUB_ACCESSION_ID AS GUDMAP_ID,
RPR_SYMBOL AS GENE,
RPR_NAME AS GENE_NAME,
CONCAT_WS(";", GROUP_CONCAT(DISTINCT REPLACE (RPR_LOCUS_TAG,"MGI:","")),GROUP_CONCAT(DISTINCT REPLACE (ALE_MGI_ALLELE_ID,"MGI:","")),CASE WHEN SUBSTRING(RPR_JAX_ACC,1,4)='MGI:' THEN REPLACE(RPR_JAX_ACC,'MGI:','') END ) AS MGI,
RPR_LOCUS_TAG AS MGI_GENE_ID,
RPR_GENBANK AS GENBANK_ID,
RPR_ENSEMBL AS ENSEMBL_ID,
GROUP_CONCAT(DISTINCT RSY_SYNONYM SEPARATOR ";") AS SYNONYMS,
PER_SURNAME AS PI_NAME,
PER_LAB AS LAB,
GROUP_CONCAT(DISTINCT AUT_NAME SEPARATOR ";") AS AUTHORS,
SUB_SUB_DATE AS DATE,

STG_STAGE_DISPLAY AS STAGE,

PRB_PROBE_NAME AS PROBE_NAME,
PRB_CLONE_NAME AS CLONE_NAME,
PRB_TISSUE AS PROBE_TISSUE,
RPR_JAX_ACC AS PROBE_ID,
RPR_OID AS maprobe,CONCAT ("maprobe:",RPR_OID) AS MAPROBE_ID,
PRB_STRAIN AS PROBE_STRAIN,
PRB_GENE_TYPE AS PROBE_GENE_TYPE,
PRB_PROBE_TYPE AS PROBE_TYPE,
PRB_VISUAL_METHOD AS PROBE_VISUAL_METHOD,
GROUP_CONCAT(DISTINCT PNT_VALUE SEPARATOR ";") AS PROBE_NOTE,
GROUP_CONCAT(DISTINCT RPN_NOTES SEPARATOR ";") AS CURATOR_NOTE,
GROUP_CONCAT(DISTINCT SNT_VALUE SEPARATOR ";") AS RESULT_NOTE,
GROUP_CONCAT(DISTINCT MNT_VALUE SEPARATOR ";") AS EXPERIMENT_NOTE,
GROUP_CONCAT(DISTINCT IMG_FILENAME,":",INT_VALUE SEPARATOR ";") AS IMAGE_WITH_NOTE,
GROUP_CONCAT(DISTINCT INT_VALUE SEPARATOR ";") AS IMAGE_NOTE,
GROUP_CONCAT(DISTINCT IMG_FILENAME SEPARATOR ";") AS IMAGE,
CONCAT(URL_URL, IMG_FILEPATH, IMG_SML_FILENAME) AS IMAGE_PATH,
SPN_ASSAY_TYPE AS SPECIMEN_ASSAY_TYPE,
SPN_FIXATION_METHOD AS FIXATION_METHOD,
SPN_STRAIN AS STRAIN,
SPN_SEX AS SEX,
CONCAT (SPN_STAGE,SPN_STAGE_FORMAT) AS DEV_STAGE,
SPN_WILDTYPE AS GENOTYPE,
SUB_ASSAY_TYPE AS ASSAY_TYPE,
SUB_PROJECT_FK AS PROJECT,
SUB_ACCESSION_ID_2 AS ALT_ID,
SUB_SOURCE AS SOURCE,
ANC_IS_ANCHOR AS ANCHOR_GENE,
ANC_IS_MARKER AS MARKER_GENE,
SOLR_FGS.FG_NAMES AS FOCUS_GROUPS,
GROUP_CONCAT(DISTINCT ALE_MGI_ALLELE_ID SEPARATOR ";") AS ALLELE_MGI_ID,
GROUP_CONCAT(DISTINCT ALE_ALLELE_NAME SEPARATOR ";") AS ALLELE_NAME,
GROUP_CONCAT(DISTINCT ALE_TYPE SEPARATOR ";") AS ALLELE_TYPE,
GROUP_CONCAT(DISTINCT PARENT_NAME SEPARATOR ";") AS TISSUE,
GROUP_CONCAT(DISTINCT IST_COMPONENT SEPARATOR ";") AS TISSUE_EMAPS,
GROUP_CONCAT(DISTINCT (REPLACE (IST_COMPONENT,"EMAPS:",""))  SEPARATOR ";") AS TISSUE_EMAPS_ID,
STG_SPECIES SPECIES,
IF(ANC_IS_ANCHOR = '1', 'anchor', IF(ANC_IS_MARKER = '1', 'marker', "")) as GENE_TYPE
from ISH_SUBMISSION left join ISH_PROBE on SUB_OID=PRB_SUBMISSION_FK left join REF_STAGE on SUB_STAGE_FK=STG_OID 
left join ISH_PROBE_NOTE ON SUB_OID=PNT_SUBMISSION_FK left join REF_PROBE on PRB_MAPROBE=RPR_OID left join REF_PRB_NOTES on RPR_OID=RPN_PROBE_FK 
left join REF_MGI_MRK on RMM_MGIACC = RPR_LOCUS_TAG left join REF_SYNONYM on RSY_REF = RMM_ID left join ISH_PERSON on SUB_PI_FK=PER_OID 
left join LNK_SUB_AUTHORS ON LSA_SUB_FK=SUB_OID left join ISH_AUTHORS ON LSA_AUT_FK=AUT_OID left join ISH_SPECIMEN on SPN_SUBMISSION_FK=SUB_OID 
left join ISH_SPECIMEN_NOTE ON MNT_SUBMISSION_FK=SUB_OID 
left join ISH_ORIGINAL_IMAGE ON SUB_OID = IMG_SUBMISSION_FK 
AND IMG_ORDER = (SELECT MIN(I.IMG_ORDER) FROM ISH_ORIGINAL_IMAGE I WHERE I.IMG_SUBMISSION_FK = SUB_OID)
left JOIN REF_URL ON URL_OID=IMG_URL_FK AND IMG_URL_FK = 31
left join ISH_IMAGE_NOTE ON INT_IMAGE_FK=IMG_OID left join ISH_SUBMISSION_NOTE ON SUB_OID=SNT_SUBMISSION_FK AND SNT_TYPE = "RESULT" 
left join REF_ANCHOR_GENES ON RPR_LOCUS_TAG=ANC_GENE_ID left join SOLR_FGS ON SOLR_FGS.ID=SUB_OID left join LNK_SUB_ALLELE ON SAL_SUBMISSION_FK=SUB_OID 
LEFT JOIN ISH_ALLELE ON SAL_ALE_OID_FK=ALE_OID left join ISH_SP_TISSUE ON SUB_OID=IST_SUBMISSION_FK 
left join EMAPA_ONTOLOGY_RELATIONS ON IST_COMPONENT=PARENT_EMAPS_ID where SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 AND SUB_ASSAY_TYPE !="Microarray" AND SUB_ASSAY_TYPE !="NextGen" 
GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_INSITU_DETAILS ADD INDEX SOLR_INSITU_DETAILS_GUDMAP_IDX (GUDMAP), ENGINE = MyISAM;

CREATE TABLE SOLR_INSITU_EXP AS (select 
distinct REPLACE (SUB_ACCESSION_ID,"GUDMAP:","") AS SIE_GUDMAP,
CONCAT_WS(";",SOLR_PRESENT.COMPONENTS,SOLR_INF_PRESENT.PARENTS,SOLR_PRESENT.EMAPS_IDS,SOLR_INF_PRESENT.PARENT_EMAPS_IDS) AS PRESENT,
CONCAT_WS(";",SOLR_PRESENT.COMPONENTS,SOLR_PRESENT.EMAPS_IDS) AS DIR_PRESENT,
CONCAT_WS(";",SOLR_INF_PRESENT.PARENTS,SOLR_INF_PRESENT.PARENT_EMAPS_IDS) AS INF_PRESENT,
CONCAT_WS(";",SOLR_NOT_DETECTED.COMPONENTS,SOLR_NOT_DETECTED.EMAPS_IDS) AS NOT_DETECTED,
CONCAT_WS(";",SOLR_INF_NOT_DETECTED.CHILDREN,SOLR_INF_NOT_DETECTED.CHILDREN_EMAPS_IDS) AS INF_NOT_DETECTED,
CONCAT_WS(";",SOLR_UNCERTAIN.COMPONENTS,SOLR_UNCERTAIN.EMAPS_IDS) AS UNCERTAIN,
CONCAT_WS(";",REPLACE (SOLR_PRESENT.EMAPS_IDS,"EMAPS:",""),REPLACE (SOLR_INF_PRESENT.PARENT_EMAPS_IDS,"EMAPS:",""),REPLACE (SOLR_NOT_DETECTED.EMAPS_IDS,"EMAPS:",""),REPLACE (SOLR_UNCERTAIN.EMAPS_IDS,"EMAPS:","")) AS EMAPS,
CONCAT_WS(";",SOLR_PRESENT.EXPRESSION_NOTES,SOLR_NOT_DETECTED.EXPRESSION_NOTES,SOLR_UNCERTAIN.EXPRESSION_NOTES) AS EXP_NOTES,
CONCAT_WS(";",SOLR_PRESENT.COMPONENT_NOTES,SOLR_NOT_DETECTED.COMPONENT_NOTES,SOLR_UNCERTAIN.COMPONENT_NOTES) AS EXPRESSION_NOTES,
COMPONENT_ANNOTATION AS ANNOTATION
from ISH_SUBMISSION left join SOLR_PRESENT on SOLR_PRESENT.ID=SUB_OID left join SOLR_INF_PRESENT on SOLR_INF_PRESENT.ID=SUB_OID left join SOLR_NOT_DETECTED on SOLR_NOT_DETECTED.ID=SUB_OID left join SOLR_INF_NOT_DETECTED on SOLR_INF_NOT_DETECTED.ID=SUB_OID left join SOLR_UNCERTAIN on SOLR_UNCERTAIN.ID=SUB_OID  where SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 AND SUB_ASSAY_TYPE !="Microarray" AND SUB_ASSAY_TYPE !="NextGen" GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_INSITU_EXP ADD INDEX SOLR_INSITU_EXP_SIE_GUDMAP_IDX (SIE_GUDMAP), ENGINE = MyISAM;



CREATE TABLE SOLR_IMAGES AS  (select IMG_OID AS IMAGE_ID,
IMG_FILENAME AS IMAGE,
CONCAT(URL_URL.URL_URL, IMG_FILEPATH, IMG_FILENAME) AS IMAGE_PATH,
CONCAT(URL_URL.URL_URL, IMG_FILEPATH, IMG_SML_FILENAME) AS THUMBNAIL_PATH,
CONCAT(CLICK_URL.URL_URL,IMG_CLICK_FILEPATH,IMG_CLICK_FILENAME) AS IMAGE_CLICK_PATH,
IMG_CLICK_FILENAME AS CLICK_FILENAME,
INT_VALUE AS IMAGE_NOTE,
IMG_TYPE AS IMAGE_TYPE,
SOLR_INSITU_DETAILS.GUDMAP,SOLR_INSITU_DETAILS.GUDMAP_ID,SOLR_INSITU_DETAILS.GENE,SOLR_INSITU_DETAILS.GENE_NAME,SOLR_INSITU_DETAILS.MGI,SOLR_INSITU_DETAILS.MGI_GENE_ID,SOLR_INSITU_DETAILS.GENBANK_ID,SOLR_INSITU_DETAILS.ENSEMBL_ID,SOLR_INSITU_DETAILS.SYNONYMS,SOLR_INSITU_DETAILS.PI_NAME,SOLR_INSITU_DETAILS.DATE,SOLR_INSITU_DETAILS.STAGE,SOLR_INSITU_DETAILS.PROBE_NAME,SOLR_INSITU_DETAILS.CLONE_NAME,SOLR_INSITU_DETAILS.PROBE_TISSUE,SOLR_INSITU_DETAILS.PROBE_ID,SOLR_INSITU_DETAILS.MAPROBE_ID,SOLR_INSITU_DETAILS.maprobe,SOLR_INSITU_DETAILS.PROBE_STRAIN,SOLR_INSITU_DETAILS.PROBE_GENE_TYPE,SOLR_INSITU_DETAILS.PROBE_TYPE,SOLR_INSITU_DETAILS.PROBE_VISUAL_METHOD,SOLR_INSITU_DETAILS.PROBE_NOTE,SOLR_INSITU_DETAILS.CURATOR_NOTE,SOLR_INSITU_DETAILS.RESULT_NOTE,SOLR_INSITU_DETAILS.EXPERIMENT_NOTE,SOLR_INSITU_DETAILS.SPECIMEN_ASSAY_TYPE,SOLR_INSITU_DETAILS.FIXATION_METHOD,SOLR_INSITU_DETAILS.STRAIN,SOLR_INSITU_DETAILS.SEX,SOLR_INSITU_DETAILS.DEV_STAGE,SOLR_INSITU_DETAILS.GENOTYPE,SOLR_INSITU_DETAILS.ASSAY_TYPE,SOLR_INSITU_DETAILS.PROJECT,SOLR_INSITU_DETAILS.ALT_ID,SOLR_INSITU_DETAILS.SOURCE,SOLR_INSITU_EXP.PRESENT, SOLR_INSITU_EXP.INF_PRESENT, SOLR_INSITU_EXP.EMAPS, SOLR_INSITU_EXP.EXPRESSION_NOTES, SOLR_INSITU_EXP.EXP_NOTES, SOLR_INSITU_DETAILS.SPECIES AS SPECIES, SOLR_INSITU_DETAILS.GENE_TYPE AS GENE_TYPE
FROM ISH_ORIGINAL_IMAGE LEFT JOIN ISH_IMAGE_NOTE ON IMG_OID=INT_IMAGE_FK LEFT JOIN SOLR_INSITU_DETAILS ON GUDMAP=IMG_SUBMISSION_FK LEFT JOIN SOLR_INSITU_EXP ON GUDMAP=SIE_GUDMAP LEFT JOIN REF_URL CLICK_URL ON CLICK_URL.URL_OID=IMG_CLICK_URL_FK JOIN REF_URL URL_URL ON URL_URL.URL_OID=IMG_URL_FK ORDER BY IMAGE_ID);
ALTER TABLE SOLR_IMAGES ADD INDEX SOLR_IMAGES_IMAGE_ID_IDX (IMAGE_ID), ENGINE = MyISAM;

ALTER TABLE SOLR_IMAGES ADD COLUMN UIG_TITLE VARCHAR(100) NULL  AFTER GENE_TYPE;
ALTER TABLE SOLR_IMAGES ADD COLUMN UIG_DESC VARCHAR(200) NULL  AFTER UIG_TITLE;
ALTER TABLE SOLR_IMAGES ADD COLUMN UGP_TITLE VARCHAR(255) NULL  AFTER UIG_DESC;
ALTER TABLE SOLR_IMAGES ADD COLUMN UGP_DESCRIPTION VARCHAR(255) NULL  AFTER UGP_TITLE;
ALTER TABLE SOLR_IMAGES ADD COLUMN UGP_OID smallint(6) AFTER UGP_DESCRIPTION;

INSERT INTO SOLR_IMAGES SELECT UIG_OID, UIG_ORIGINAL_FILENAME, CONCAT('http://www.gudmap.org/Gudmap/images/gx/',UIG_FILEPATH,UIG_FILENAME), CONCAT('http://www.gudmap.org/Gudmap/images/gx/',UIG_FILEPATH,'thumbnails/',UIG_FILENAME), CONCAT('http://www.gudmap.org/Gudmap/images/gx/',UIG_FILEPATH,UIG_FILENAME), NULL, NULL, 'schematic', '', NULL, NULL, NULL, NULL, '', '', '', NULL, '', '1000-01-01', NULL, '', '', '', '', NULL, 0, '', '', NULL, '', NULL, NULL, NULL, NULL, NULL, NULL, '', NULL, NULL, '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,UIG_TITLE,UIG_DESC,UGP_TITLE,UGP_DESCRIPTION,UGP_OID FROM UQ_IMAGE, UQ_IMAGE_GROUP WHERE UIG_GROUP_FK=UGP_OID;


-- Sequencing Samples
CREATE TABLE SOLR_SEQ_DETAILS AS  (SELECT REPLACE (SUB_ACCESSION_ID,"GUDMAP:","") AS GUDMAP,
SUB_ACCESSION_ID AS GUDMAP_ID,
/*NGS Sample*/
NGS_SAMPLE_NAME AS SAMPLE_NAME,
NGS_SHORT_NAME AS SAMPLE_SHORT_NAME,
NGS_DESCRIPTION AS SAMPLE_DESCRIPTION,
NGS_GEO_ID AS SAMPLE_GEO_ID,
NGS_STRAIN AS SAMPLE_STRAIN,
NGS_SEX AS SAMPLE_SEX,
NGS_DEV_STAGE AS DEVELOPMENT_STAGE,
NGS_POOLED_SAMPLE AS SAMPLE_POOLED,
NGS_POOL_SIZE AS SAMPLE_POOL_SIZE,
NGS_EXPERIMENTAL_METHOD AS SAMPLE_EXPERIMENTAL_METHOD,
NGS_READ_LENGTH AS SAMPLE_READ_LENGTH,
NGS_SAMPLE_NOTES AS SAMPLE_NOTES,
/*NGD Series*/
NGR_GEO_ID AS SERIES_GEO_ID,
NGR_TITLE AS SERIES_TITLE,
NGR_SUMMARY AS SERIES_SUMMARY,
NGR_OVERALL_DESIGN AS SERIES_OVERALL_DESIGN,
NGR_SHORT_LABEL AS SERIES_SHORT_LABEL,
/*Anatomy*/
GROUP_CONCAT(DISTINCT ANO_COMPONENT_NAME SEPARATOR ';') AS COMPONENT,
substring(ATN_PUBLIC_ID,6) AS EMAPS,
/*Lab*/
IF ((SELECT COUNT(*) FROM REF_SUBMISSION_PERSON_GRP WHERE SPG_SUBMISSION_FK = SUB_OID) > 0, (SELECT GRP_DESCRIPTION FROM REF_GROUP JOIN REF_SUBMISSION_PERSON_GRP ON SPG_GROUP_FK = GRP_OID WHERE SPG_SUBMISSION_FK = SUB_OID), PER_SURNAME) AS PI_NAME,
PER_LAB AS LAB,
SUB_SOURCE AS SOURCE,
SUB_SUB_DATE AS DATE,
/*Stage*/
STG_STAGE_DISPLAY AS STAGE,
TRIM(CASE NGS_STAGE_FORMAT WHEN 'dpc' THEN CONCAT(NGS_DEV_STAGE,' ',NGS_STAGE_FORMAT) WHEN 'P' THEN CONCAT('P',NGS_DEV_STAGE) ELSE CONCAT(NGS_STAGE_FORMAT,NGS_DEV_STAGE) END) AS DEV_STAGE,
NGS_STAGE_FORMAT AS STAGE_FORMAT,
(CASE WHEN NGS_GENOTYPE='true' THEN 'Wild Type' WHEN NGS_GENOTYPE='false' THEN 'Non-wild Type' ELSE '' END) AS GENOTYPE,
GROUP_CONCAT(DISTINCT SAL_FIRST_CHROM) AS FIRST_CHROMATID,
GROUP_CONCAT(DISTINCT SAL_SECOND_CHROM) AS SECOND_CHROMATID,
GROUP_CONCAT(DISTINCT ALE_MGI_ALLELE_ID) AS ALLELE_MGI_ID,
GROUP_CONCAT(DISTINCT ALE_LAB_NAME_ALLELE) AS ALLELE_LAB_NAME,
GROUP_CONCAT(DISTINCT ALE_ALLELE_NAME) AS ALLELE_NAME,
GROUP_CONCAT(DISTINCT ALE_TYPE) AS ALLELE_TYPE,
STG_SPECIES AS SPECIES
from ISH_SUBMISSION
left join REF_STAGE on SUB_STAGE_FK=STG_OID
left join NGD_SAMPLE on NGS_SUBMISSION_FK=SUB_OID
left join NGD_SAMPLE_SERIES on NGL_SAMPLE_FK=NGS_OID
left join NGD_SERIES on NGL_SERIES_FK=NGR_OID
left join ISH_SP_TISSUE on IST_SUBMISSION_FK=SUB_OID
left join ANA_TIMED_NODE on ATN_PUBLIC_ID=IST_COMPONENT
left join ANA_NODE on ATN_NODE_FK = ANO_OID
left join ISH_PERSON on SUB_PI_FK=PER_OID
left join LNK_SUB_ALLELE on SUB_OID=SAL_SUBMISSION_FK
left join ISH_ALLELE on SAL_ALE_OID_FK=ALE_OID
where SUB_IS_PUBLIC=1 AND SUB_IS_DELETED=0 AND SUB_DB_STATUS_FK=4 AND SUB_ASSAY_TYPE = 'NextGen' GROUP BY SUB_ACCESSION_ID);
ALTER TABLE SOLR_SEQ_DETAILS ADD INDEX SOLR_SEQ_DETAILS_GUDMAP_IDX (GUDMAP), ENGINE = MyISAM;










