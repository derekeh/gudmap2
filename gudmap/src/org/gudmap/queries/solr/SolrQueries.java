package org.gudmap.queries.solr;



/**
 * <h1>SolrQueries</h1>
 * The SolrQueries class contains the SQL query string used to extract data from the database
 * to create the indexes required for searching.
 * 
 * @author Bernard Haggarty
 * @version 1.0
 * @since 13/03/2016 
 */
public class SolrQueries {

	public final static String GET_GENE_INDEX_DATA = "SELECT SOLR_GENES_INDEX.GENE,SOLR_GENES_INDEX.GENE_NAME,SOLR_GENES_INDEX.MGI_GENE_ID,SOLR_GENES_INDEX.MGI,SOLR_GENES_INDEX.ENSEMBL_ID,SOLR_GENES_INDEX.SYNONYMS,SOLR_GENES_INDEX.OMIM,SOLR_GENES_INDEX.ARRAY_RANGE,SOLR_GENES_INDEX.ISH_RANGE, " +
			"PROBESETS, ENTREZ_ID, GENBANK_ID, " +
			"IF(GUDMAP, 1, 0) AS INSITU_ASSAY, IF(MA_GUDMAP, 1, 0) AS MA_ASSAY, CONCAT(MA_GUDMAP,';',GUDMAP) AS GUDMAP, " +
			"CONCAT(MA_GUDMAP_IDS,';',GUDMAP_IDS) AS GUDMAP_IDS, PRESENT, DIR_PRESENT, NOT_DETECTED, UNCERTAIN, EMAPS, " +
			"SOURCE, PI_NAME, LAB, ANCHOR, MARKER, GENE_TYPE, SPECIES FROM SOLR_GENES_INDEX " +
			"LEFT JOIN SOLR_IN_SITU_GENES ON (SOLR_GENES_INDEX.GENE=SOLR_IN_SITU_GENES.GENE) " +
			"LEFT JOIN SOLR_MA_GENES ON (SOLR_GENES_INDEX.GENE=SOLR_MA_GENES.MA_GENE)";

	public final static String GET_GENELISTS_INDEX_DATA = "SELECT GNL_OID AS ID,GNL_SHORT_NAME AS NAME,GNL_DESCRIPTION AS DESCRIPTION," +
			"GNL_SERIES_PLATFORM AS PLATFORM,GNL_KEY_SAMPLE AS KEY_SAMPLE,GNL_MA_DATASET AS MA_DATASET,GNL_MA_DATASET_ID AS MA_DATASET_ID," +
			"GNL_TOTAL_ENTITIES AS TOT_ENTITIES,GNL_TOTAL_GENES AS TOT_GENES,REPLACE (GNL_AUTHOR, ',',';') AS AUTHOR,GNL_DATE AS DATE," +
			"GNL_STAGE AS STAGE,GNL_SEX AS SEX,GNL_GENELIST_TYPE AS GENELIST_TYPE,GROUP_CONCAT(DISTINCT GLE_ENTITY_ID SEPARATOR ';') " +
			"AS ENTITIES,GROUP_CONCAT(DISTINCT GLE_GENE_SYMBOL SEPARATOR ';') AS GENE,GROUP_CONCAT(DISTINCT GLE_GUDMAP_ID SEPARATOR ';') " +
			"AS GUDMAP_ID,GROUP_CONCAT(DISTINCT REPLACE(GLE_GUDMAP_ID,'GUDMAP:','') SEPARATOR ';') AS GUDMAP,LPU_REF " +
			"AS REF,GROUP_CONCAT(DISTINCT GMP_EMAPA_ID SEPARATOR ';') AS EMAP_IDS,GROUP_CONCAT(DISTINCT REPLACE(GNL_EMAPA_ID,'EMAP:','') " +
			"SEPARATOR ';') AS EMAP,GROUP_CONCAT(DISTINCT ANO_COMPONENT_NAME SEPARATOR ';') AS EMAP_TERM FROM REF_GENELISTS " +
			"LEFT JOIN GNL_ENTITIES ON GNL_OID=GLE_LIST_ID LEFT JOIN GNL_EMAPA_IDS ON GNL_OID=GMP_LIST_ID " +
			"LEFT JOIN ANA_TIMED_NODE ON GMP_EMAPA_ID=ATN_PUBLIC_ID LEFT JOIN ANA_NODE ON ATN_NODE_FK=ANO_OID " +
			"LEFT JOIN ISH_LINKED_PUBLICATION ON GNL_REFERENCE=LPU_OID WHERE GLE_GENE_SYMBOL != '' GROUP BY GNL_OID";
	
	public final static String GET_INSITU_INDEX_DATA = "SELECT SOLR_INSITU_DETAILS.*,SOLR_INSITU_EXP.PRESENT AS PRESENT,SOLR_INSITU_EXP." +
			"DIR_PRESENT AS DIR_PRESENT,SOLR_INSITU_EXP.INF_PRESENT AS INF_PRESENT,SOLR_INSITU_EXP.NOT_DETECTED AS NOT_DETECTED," +
			"SOLR_INSITU_EXP.INF_NOT_DETECTED AS INF_NOT_DETECTED,SOLR_INSITU_EXP.UNCERTAIN AS UNCERTAIN,SOLR_INSITU_EXP." +
			"EMAPS AS EMAPS,SOLR_INSITU_EXP.EXP_NOTES AS EXP_NOTES,SOLR_INSITU_EXP.EXPRESSION_NOTES AS EXPRESSION_NOTES," +
			"SOLR_INSITU_EXP.ANNOTATION AS ANNOTATION,SOLR_INSITU_DETAILS.TISSUE AS TISSUE_TYPE FROM SOLR_INSITU_DETAILS " +
			"JOIN SOLR_INSITU_EXP ON SOLR_INSITU_DETAILS.GUDMAP=SOLR_INSITU_EXP.SIE_GUDMAP";
	
	
	public final static String GET_MICROARRAY_INDEX_DATA = "SELECT SOLR_MA_DETAILS.*, SOLR_MA_GENES_2.MAG2_GENES AS GENE, " +
			"SOLR_MA_GENES_2.MAG2_MGI_IDS AS MGI_IDS, SOLR_MA_GENES_2.MAG2_MGI AS MGI FROM SOLR_MA_DETAILS " +
			"LEFT JOIN SOLR_MA_GENES_2 ON SOLR_MA_DETAILS.GUDMAP=SOLR_MA_GENES_2.MAA_GUDMAP_ID";
	
	public final static String GET_SAMPLES_INDEX_DATA = "SELECT DISTINCT SUB_ACCESSION_ID AS GUDMAP_ID, substring(SUB_ACCESSION_ID,8) AS GUDMAP," +
			"SMP_GEO_ID AS SAMPLE_GEO_ID,CONCAT('TS',SMP_THEILER_STAGE) AS STAGE, " +
			"TRIM(CASE SPN_STAGE_FORMAT WHEN 'dpc' THEN CONCAT(SPN_STAGE,' ',SPN_STAGE_FORMAT) WHEN 'P' THEN CONCAT('P',SPN_STAGE) " +
			"ELSE CONCAT(SPN_STAGE_FORMAT,SPN_STAGE) END) AS DEV_STAGE, SUB_SOURCE AS SOURCE, IF ((SELECT COUNT(*) " +
			"FROM REF_SUBMISSION_PERSON_GRP WHERE SPG_SUBMISSION_FK = SUB_OID) > 0, (SELECT GRP_DESCRIPTION FROM REF_GROUP " +
			"JOIN REF_SUBMISSION_PERSON_GRP ON SPG_GROUP_FK = GRP_OID WHERE SPG_SUBMISSION_FK = SUB_OID), SUB_SOURCE) AS PI_NAME," +
			"SUB_SUB_DATE AS DATE,SMP_SEX AS SEX,SRM_SAMPLE_DESCRIPTION AS DESCRIPTION,SMP_TITLE AS TITLE, SER_GEO_ID AS SERIES_GEO_ID, " +
			"GROUP_CONCAT(DISTINCT CONCAT(ANO_COMPONENT_NAME, ' (' , ATN_PUBLIC_ID, ')') SEPARATOR ';') AS COMPONENT, " +
			"ALE_GENE AS QMC_ALE_GENE, SUB_ASSAY_TYPE AS ASSAY_TYPE, SPN_ASSAY_TYPE AS SPECIMEN_ASSAY_TYPE, PER_OID AS PER_OID, " +
			"PLT_GEO_ID AS PLATFORM_GEO_ID, STG_SPECIES AS SPECIES, " +
			"CASE SPN_WILDTYPE WHEN 'Wild Type' THEN 'wild type' ELSE CASE WHEN (SELECT DISTINCT GROUP_CONCAT(ALE_ALLELE_NAME) FROM ISH_ALLELE, LNK_SUB_ALLELE  " +
			"WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) IS NOT NULL THEN (SELECT DISTINCT GROUP_CONCAT(ALE_ALLELE_NAME) FROM ISH_ALLELE, " +
			"LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) ELSE (SELECT DISTINCT GROUP_CONCAT(ALE_LAB_NAME_ALLELE) FROM ISH_ALLELE, " +
			"LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) END  END AS GENOTYPE " + 
			"FROM ISH_SUBMISSION JOIN REF_STAGE ON STG_OID = SUB_STAGE_FK JOIN MIC_SAMPLE ON SMP_SUBMISSION_FK = SUB_OID " +
			"JOIN ISH_SPECIMEN ON SUB_OID = SPN_SUBMISSION_FK JOIN MIC_SERIES_SAMPLE ON SRM_SAMPLE_FK = SMP_OID " +
			"JOIN MIC_SERIES ON SRM_SERIES_FK = SER_OID JOIN ISH_PERSON ON PER_OID = SUB_PI_FK " +
			"JOIN ISH_EXPRESSION ON EXP_SUBMISSION_FK=SUB_OID JOIN ANA_TIMED_NODE ON ATN_PUBLIC_ID=EXP_COMPONENT_ID " +
			"JOIN ANA_NODE ON ATN_NODE_FK = ANO_OID LEFT JOIN ISH_MUTANT ON MUT_SUBMISSION_FK = SUB_OID " +
			"LEFT JOIN LNK_SUB_ALLELE ON SAL_SUBMISSION_FK=SUB_OID left join ISH_ALLELE ON SAL_ALE_OID_FK=ALE_OID " +
			"LEFT JOIN MIC_PLATFORM ON PLT_OID = SER_PLATFORM_FK WHERE SUB_ASSAY_TYPE = 'Microarray' AND SUB_IS_PUBLIC = 1 " +
			"AND SUB_IS_DELETED = 0 AND SUB_DB_STATUS_FK = 4 GROUP BY SUB_ACCESSION_ID,SMP_GEO_ID,SMP_THEILER_STAGE," +
			"TRIM(CASE SPN_STAGE_FORMAT WHEN 'dpc' THEN CONCAT(SPN_STAGE,' ',SPN_STAGE_FORMAT) WHEN 'P' THEN CONCAT('P',SPN_STAGE) " +
			"ELSE CONCAT(SPN_STAGE_FORMAT,SPN_STAGE) END), SUB_SOURCE, SUB_SUB_DATE,SMP_SEX,SRM_SAMPLE_DESCRIPTION,SMP_TITLE, " +
			"SER_GEO_ID, SPN_ASSAY_TYPE  order by NATURAL_SORT(SUB_ACCESSION_ID)";
			
	public final static String GET_SERIES_INDEX_DATA = "SELECT DISTINCT SER_TITLE AS TITLE, SER_GEO_ID AS SERIES_GEO_ID, " +
			"(SELECT COUNT(distinct SRM_SAMPLE_FK) FROM MIC_SERIES_SAMPLE WHERE SRM_SERIES_FK = SER_OID) AS SAMPLE_NUMBER, " +
			"SUB_SOURCE AS SOURCE, IF ((SELECT COUNT(*) FROM REF_SUBMISSION_PERSON_GRP WHERE SPG_SUBMISSION_FK = SUB_OID) > 0, " +
			"(SELECT GRP_DESCRIPTION FROM REF_GROUP JOIN REF_SUBMISSION_PERSON_GRP ON SPG_GROUP_FK = GRP_OID " +
			"WHERE SPG_SUBMISSION_FK = SUB_OID), PER_SURNAME) AS PI_NAME,PLT_GEO_ID AS PLATFORM_GEO_ID, SER_OID AS SERIES_OID, " +
			"GROUP_CONCAT(DISTINCT ANO_COMPONENT_NAME SEPARATOR ';') AS COMPONENT FROM MIC_SERIES, MIC_SERIES_SAMPLE, MIC_SAMPLE, " +
			"ISH_SUBMISSION, ISH_EXPRESSION, MIC_PLATFORM, ISH_PERSON, ANA_NODE, ANA_TIMED_NODE WHERE SRM_SERIES_FK = SER_OID " +
			"AND SRM_SAMPLE_FK = SMP_OID AND SMP_SUBMISSION_FK = SUB_OID AND EXP_SUBMISSION_FK=SUB_OID AND SUB_PI_FK = PER_OID " +
			"AND PLT_OID = SER_PLATFORM_FK AND ATN_PUBLIC_ID = EXP_COMPONENT_ID AND ATN_NODE_FK = ANO_OID  AND SUB_IS_PUBLIC = 1 " +
			"AND SUB_IS_DELETED = 0 AND SUB_DB_STATUS_FK = 4  GROUP BY SER_GEO_ID ORDER BY PER_SURNAME, NATURAL_SORT(TRIM(SER_TITLE)), " +
			"NATURAL_SORT(TRIM(SER_GEO_ID))";


	public final static String GET_TISSUE_INDEX_DATA = "SELECT A.CSC_OID AS ID, A.CSC_DISPLAY_NAME AS NAME, A.CSC_SYNONYM AS SYNONYM, " +
			"A.CSC_STAGES AS STAGES, REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE ( REPLACE(A.CSC_FOCUS_GROUP,'MET','metanephros')," +
			"'LUT','lower urinary tract'),'EGS','early genitourinary system'),'MRS','male reproductive system'),'FRS'," +
			"'female reproductive system'),'UNK','unknown') AS FOCUS_GROUPS, GROUP_CONCAT(DISTINCT CSN_GENELIST_ID_FK SEPARATOR ';') " +
			"AS GENELIST_IDS, GROUP_CONCAT(DISTINCT GNL_SHORT_NAME SEPARATOR ';') AS GENELIST_NAMES, CSI_IMAGE_LOC_URL AS IMAGE_URL, " +
			"CSI_IMAGE_NAME AS IMAGE_NAME, GROUP_CONCAT(DISTINCT B.CSC_DISPLAY_NAME SEPARATOR ';') AS SEC_NAMES, " +
			"GROUP_CONCAT(DISTINCT CST_TYPE SEPARATOR ';') AS LINK_TYPES,SOLR_TS_EMAPIDS.TS_GUDMAP_IDS AS GUDMAP," +
			"REPLACE (SOLR_TS_EMAPIDS.TS_EMAP_IDS,'EMAP:','') AS EMAP,SOLR_TS_EMAPIDS.TS_EMAP_IDS AS EMAPIDS," +
			"SOLR_TS_EMAPIDS.TS_COMP_NAMES AS COMPONENT,REPLACE (SOLR_TS_EMAPIDS.TS_MGI_IDS,'MGI:','') AS MGI," +
			"SOLR_TS_EMAPIDS.TS_MGI_IDS AS GENE_MGI_ID,SOLR_TS_EMAPIDS.TS_GENE AS GENE,SOLR_TS_EMAPIDS.TS_PROBE_IDS AS PROBE_IDS," +
			"SOLR_TS_EMAPIDS.TS_MAPROBES AS MA_PROBES_ID,REPLACE (SOLR_TS_EMAPIDS.TS_MAPROBES,'maprobe:','') AS maprobe," +
			"SOLR_TS_EMAPIDS.TS_THEILER_STAGE AS STAGE FROM CPS_COMPONENTS A " +
			"LEFT JOIN CPS_GENELIST_LINKS ON A.CSC_OID=CSN_CS_ID_FK LEFT JOIN REF_GENELISTS ON CSN_GENELIST_ID_FK=GNL_OID " +
			"LEFT JOIN CPS_IMAGES ON A.CSC_OID=CSI_CS_ID_FK LEFT JOIN CPS_LINKS ON A.CSC_OID=CSL_PRIMARY_ID " +
			"LEFT JOIN CPS_LINK_TYPES ON CSL_LINK_TYPE=CST_OID LEFT JOIN CPS_COMPONENTS B ON B.CSC_OID=CSL_SECONDARY_ID " +
			"LEFT JOIN SOLR_TS_EMAPIDS ON A.CSC_OID=SOLR_TS_EMAPIDS.TS_ID WHERE A.CSC_VISIBLE=1 GROUP BY A.CSC_OID";


	
	public final static String GET_MOUSE_STRAINS_INDEX_DATA = "SELECT RMS_OID AS ID, RMS_GENE AS GENE, " +
			"RMS_REPORTER_ALLELE AS REPORTER_ALLELE, RMS_ALLELE_TYPE AS ALLELE_TYPE, " +
			"CONCAT(A.MSD_DOC_NAME,' (',A.MSD_FILE_CREDIT,')') AS ALLELE_VER, CONCAT(A.MSD_DOC_FILEPATH,A.MSD_DOC_NAME) AS ALLELE_VER_URL, " +
			"CONCAT(B.MSD_DOC_NAME,' (',B.MSD_FILE_CREDIT,')') AS ALLELE_CHAR, CONCAT(B.MSD_DOC_FILEPATH,B.MSD_DOC_NAME) AS ALLELE_CHAR_URL, " +
			"RMS_STRAIN_AVA AS STRAIN_AVA, RMS_STRAIN_AVA_URL AS STRAIN_AVA_URL, RMS_ORGAN AS ORGAN, RMS_CELL_TYPE AS CELL_TYPE " +
			"FROM MUS_MOUSE_STRAINS LEFT JOIN MUS_STRAINS_DOCS A ON RMS_OID=A.MSD_STRAIN_FK AND A.MSD_DOC_TYPE = 'Allele Verification' " +
			"LEFT JOIN MUS_STRAINS_DOCS B ON RMS_OID=B.MSD_STRAIN_FK AND B.MSD_DOC_TYPE = 'Allele Characterisation'";	
	
	
	public final static String GET_IMAGE_INDEX_DATA = "SELECT * FROM SOLR_IMAGES";

	
	public final static String GET_NEXTGEN_SERIES_INDEX_DATA = "SELECT DISTINCT NGR_TITLE AS TITLE,NGR_GEO_ID AS SERIES_GEO_ID," +
			"SUB_SOURCE AS SOURCE, (SELECT COUNT(distinct NGL_SAMPLE_FK) FROM NGD_SAMPLE_SERIES WHERE NGL_SERIES_FK = NGR_OID) " +
			"AS SAMPLE_NUMBER, NGP_LIBRARY_STRATEGY AS LIBRARY_STRATEGY, GROUP_CONCAT(DISTINCT ANO_COMPONENT_NAME SEPARATOR ';') " +
			"AS COMPONENT FROM NGD_SERIES, NGD_SAMPLE_SERIES, NGD_SAMPLE, ISH_SUBMISSION, ISH_SP_TISSUE, ANA_NODE, ANA_TIMED_NODE, " +
			"ISH_PERSON, NGD_PROTOCOL WHERE NGL_SERIES_FK = NGR_OID AND NGL_SAMPLE_FK = NGS_OID AND NGS_PROTOCOL_FK=NGP_OID " +
			"AND NGS_SUBMISSION_FK = SUB_OID AND IST_SUBMISSION_FK=SUB_OID AND ATN_PUBLIC_ID = IST_COMPONENT AND SUB_PI_FK = PER_OID " +
			"AND ATN_NODE_FK = ANO_OID  AND SUB_IS_PUBLIC = 1 AND SUB_IS_DELETED = 0 AND SUB_DB_STATUS_FK = 4 GROUP BY NGR_GEO_ID " +
			"ORDER BY PER_SURNAME, NATURAL_SORT(TRIM(NGR_TITLE)), NATURAL_SORT(TRIM(NGR_GEO_ID))";
	

	public final static String GET_NEXTGEN_SAMPLES_INDEX_DATA = "SELECT DISTINCT substring(SUB_ACCESSION_ID,8) AS GUDMAP, " +
			"NGS_GEO_ID AS SAMPLE_GEO_ID,NGR_GEO_ID AS SERIES_GEO_ID,SUB_SOURCE AS SOURCE,NGP_LIBRARY_STRATEGY AS LIBRARY_STRATEGY," +
			"STG_STAGE_DISPLAY AS STAGE, IF ((SELECT COUNT(*) FROM REF_SUBMISSION_PERSON_GRP WHERE SPG_SUBMISSION_FK = SUB_OID) > 0, " +
			"(SELECT GRP_DESCRIPTION FROM REF_GROUP JOIN REF_SUBMISSION_PERSON_GRP ON SPG_GROUP_FK = GRP_OID " +
			"WHERE SPG_SUBMISSION_FK = SUB_OID), SUB_SOURCE) AS PI_NAME,TRIM(CASE NGS_STAGE_FORMAT WHEN 'dpc' THEN " +
			"CONCAT(NGS_DEV_STAGE,' ',NGS_STAGE_FORMAT) WHEN 'P' THEN CONCAT('P',NGS_DEV_STAGE) ELSE " +
			"CONCAT(NGS_STAGE_FORMAT,NGS_DEV_STAGE) END) AS DEV_STAGE,SUB_SUB_DATE AS DATE,NGS_SEX AS SEX,NGS_DESCRIPTION AS SAMPLE_DESCRIPTION," +
			"NGS_SAMPLE_NAME AS SAMPLE_NAME,(CASE WHEN NGS_GENOTYPE='true' THEN 'Wild Type' WHEN NGS_GENOTYPE='false' THEN ALE_ALLELE_NAME " +
			"ELSE '' END) AS GENOTYPE,GROUP_CONCAT(DISTINCT CONCAT(ANO_COMPONENT_NAME, ' (' , ANO_PUBLIC_ID, ')') SEPARATOR ';') AS COMPONENT, " +
			"STG_SPECIES AS SPECIES "+
			"FROM ISH_SUBMISSION JOIN NGD_SAMPLE ON NGS_SUBMISSION_FK=SUB_OID JOIN NGD_SAMPLE_SERIES ON NGL_SAMPLE_FK = NGS_OID " +
			"JOIN NGD_SERIES ON NGL_SERIES_FK = NGR_OID JOIN NGD_PROTOCOL ON NGS_PROTOCOL_FK=NGP_OID JOIN ISH_PERSON ON PER_OID = SUB_PI_FK " +
			"JOIN ISH_SP_TISSUE ON IST_SUBMISSION_FK=SUB_OID JOIN ANA_TIMED_NODE ON ATN_PUBLIC_ID=IST_COMPONENT " +
			"JOIN ANA_NODE ON ATN_NODE_FK = ANO_OID LEFT JOIN REF_STAGE ON SUB_STAGE_FK=STG_OID " +
			"LEFT JOIN LNK_SUB_ALLELE ON SAL_SUBMISSION_FK=SUB_OID LEFT JOIN ISH_ALLELE ON SAL_ALE_OID_FK=ALE_OID " +
			"WHERE SUB_ASSAY_TYPE = 'NextGen' AND SUB_IS_PUBLIC = 1 AND SUB_IS_DELETED = 0 AND SUB_DB_STATUS_FK = 4 " +
			"AND SAL_ORDER = 1 GROUP BY SUB_ACCESSION_ID,NGS_GEO_ID";

	public final static String GET_WEB_INDEX_DATA = "SELECT * FROM Z_WEB";	
	
	
	public final static String GENE_LIST = "SELECT DISTINCT RMM_SYMBOL FROM REF_MGI_MRK";
	public final static String GENE_LIST2 = "SELECT DISTINCT RMM_SYMBOL FROM REF_PROBE LEFT JOIN REF_MGI_MRK ON RPR_LOCUS_TAG=RMM_MGIACC ORDER BY RMM_SYMBOL";

	public final static String CARNEGIE_STAGES = "SELECT DISTINCT STG_STAGE_DISPLAY FROM REF_STAGE WHERE STG_SPECIES = 'Homo sapiens' ORDER BY STG_ORDER";

	public final static String THEILER_AGES="SELECT DISTINCT STG_ALT_STAGE FROM REF_STAGE WHERE STG_SPECIES = 'Mus musculus' ORDER BY STG_ORDER";
	public final static String CARNEGIE_AGES="SELECT DISTINCT STG_ALT_STAGE FROM REF_STAGE WHERE STG_SPECIES = 'Homo sapiens' ORDER BY STG_ORDER";
	
}