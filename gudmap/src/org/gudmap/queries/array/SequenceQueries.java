package org.gudmap.queries.array;

import org.gudmap.queries.generic.GenericQueries;

public class SequenceQueries {
	
	public final static String TOTAL_SEQUENCE_SERIES = "SELECT COUNT(DISTINCT NGR_GEO_ID) TOTAL FROM NGD_SERIES, NGD_SAMPLE_SERIES, NGD_SAMPLE, " +
			"ISH_SUBMISSION WHERE NGL_SERIES_FK = NGR_OID AND NGL_SAMPLE_FK = NGS_OID AND NGS_SUBMISSION_FK = SUB_OID AND " +
			GenericQueries.PUBLIC_ENTRIES;
	
	public final static String SEQUENCE_SERIES_BROWSE_PARAM = "SELECT DISTINCT NGR_TITLE series_title, NGR_GEO_ID geo_series_id, SUB_SOURCE source, " +
			"(SELECT COUNT(distinct NGL_SAMPLE_FK) FROM NGD_SAMPLE_SERIES WHERE NGL_SERIES_FK = NGR_OID) num_samples, NGP_LIBRARY_STRATEGY library_strategy, " +
			"GROUP_CONCAT(DISTINCT ANO_COMPONENT_NAME SEPARATOR ', ') components, NGR_OID series_oid FROM " +
			"NGD_SERIES, NGD_SAMPLE_SERIES, NGD_PROTOCOL, NGD_SAMPLE, ISH_SUBMISSION, ISH_SP_TISSUE, ISH_PERSON, ANA_NODE, ANA_TIMED_NODE " +
			"%s " +
			"NGL_SERIES_FK = NGR_OID AND NGL_SAMPLE_FK = NGS_OID AND NGS_SUBMISSION_FK = SUB_OID AND NGS_PROTOCOL_FK=NGP_OID AND " +
			"IST_SUBMISSION_FK=SUB_OID AND SUB_PI_FK = PER_OID AND ATN_PUBLIC_ID = IST_COMPONENT AND ATN_NODE_FK = ANO_OID AND " +
			GenericQueries.PUBLIC_ENTRIES  +
			"GROUP BY NGR_OID  ORDER BY %s %s, NATURAL_SORT(TRIM(NGR_GEO_ID)) LIMIT ?, ?";
	//"GROUP BY NGR_OID  ORDER BY PER_SURNAME, NATURAL_SORT(TRIM(NGR_GEO_ID)) LIMIT 0, 20";
	
	/*public final static String SEQUENCE_SAMPLE_BROWSE_PARAM="SELECT DISTINCT SUB_OID oid, SUB_ACCESSION_ID gudmap_accession, NGS_GEO_ID geo_sample_id, " +
			"NGS_OID series_oid, NGR_GEO_ID geo_series_id, SUB_SOURCE source, NGP_LIBRARY_STRATEGY library_strategy, " +
			"TRIM(CASE NGS_STAGE_FORMAT WHEN 'dpc' THEN CONCAT(NGS_DEV_STAGE,' ',NGS_STAGE_FORMAT) ELSE CONCAT(NGS_STAGE_FORMAT,NGS_DEV_STAGE) END) age, " +
			"SUB_SUB_DATE submission_date, NGS_SEX sex, NGS_DESCRIPTION sample_description, NGS_SAMPLE_NAME sample_name, CASE NGS_GENOTYPE WHEN 'true' THEN 'wild type' " +
			"ELSE CASE WHEN (SELECT DISTINCT GROUP_CONCAT(ALE_ALLELE_NAME) FROM ISH_ALLELE, LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) " +
			"IS NOT NULL THEN (SELECT DISTINCT GROUP_CONCAT(ALE_ALLELE_NAME) FROM ISH_ALLELE, LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) " +
			"ELSE (SELECT DISTINCT GROUP_CONCAT(ALE_LAB_NAME_ALLELE) FROM ISH_ALLELE, LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) END  END AS genotype, " +
			"GROUP_CONCAT(DISTINCT CONCAT(ANO_COMPONENT_NAME, ' (' , ATN_PUBLIC_ID, ')') SEPARATOR ', ') components, SUB_ASSAY_TYPE assay_type, " +
			"PER_OID person_oid, SUB_EMBRYO_STG stage " +
			"FROM ISH_SUBMISSION JOIN NGD_SAMPLE ON NGS_SUBMISSION_FK = SUB_OID JOIN NGD_SAMPLE_SERIES ON NGL_SAMPLE_FK = NGS_OID JOIN NGD_SERIES ON NGL_SERIES_FK = NGR_OID " +
			"JOIN NGD_PROTOCOL ON NGS_PROTOCOL_FK=NGP_OID JOIN ISH_PERSON ON PER_OID = SUB_PI_FK JOIN ISH_SP_TISSUE ON IST_SUBMISSION_FK=SUB_OID " +
			"JOIN ANA_TIMED_NODE ON ATN_PUBLIC_ID=IST_COMPONENT JOIN ANA_NODE ON ATN_NODE_FK = ANO_OID  LEFT JOIN LNK_SUB_ALLELE ON SAL_SUBMISSION_FK = SUB_OID " +
			"LEFT JOIN ISH_ALLELE ON SAL_ALE_OID_FK = ALE_OID " +
			"%s " +
			"SUB_ASSAY_TYPE = ? %s AND " + GenericQueries.PUBLIC_ENTRIES +
			"GROUP BY SUB_ACCESSION_ID  " +
			"ORDER BY %s %s, NATURAL_SORT(SUB_ACCESSION_ID) LIMIT ?, ?";*/
	
	public final static String SEQUENCE_SAMPLE_BROWSE_PARAM="SELECT DISTINCT SUB_OID oid, SUB_ACCESSION_ID gudmap_accession, NGS_GEO_ID geo_sample_id, " +
			"NGS_OID series_oid, NGR_GEO_ID geo_series_id, SUB_SOURCE source, NGP_LIBRARY_STRATEGY library_strategy, " +
			"STG_ALT_STAGE age, " +
			"SUB_SUB_DATE submission_date, NGS_SEX sex, NGS_DESCRIPTION sample_description, NGS_SAMPLE_NAME sample_name, CASE NGS_GENOTYPE WHEN 'true' THEN 'wild type' " +
			"ELSE CASE WHEN (SELECT DISTINCT GROUP_CONCAT(ALE_ALLELE_NAME) FROM ISH_ALLELE, LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) " +
			"IS NOT NULL THEN (SELECT DISTINCT GROUP_CONCAT(ALE_ALLELE_NAME) FROM ISH_ALLELE, LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) " +
			"ELSE (SELECT DISTINCT GROUP_CONCAT(ALE_LAB_NAME_ALLELE) FROM ISH_ALLELE, LNK_SUB_ALLELE  WHERE SAL_ALE_OID_FK=ALE_OID AND SAL_SUBMISSION_FK=SUB_OID) END  END AS genotype, " +
			"GROUP_CONCAT(DISTINCT CONCAT(ANO_COMPONENT_NAME, ' (' , ATN_PUBLIC_ID, ')') SEPARATOR ', ') components, SUB_ASSAY_TYPE assay_type, " +
			"PER_OID person_oid, STG_STAGE_DISPLAY stage, STG_SPECIES species " +
			"FROM ISH_SUBMISSION JOIN NGD_SAMPLE ON NGS_SUBMISSION_FK = SUB_OID JOIN NGD_SAMPLE_SERIES ON NGL_SAMPLE_FK = NGS_OID JOIN NGD_SERIES ON NGL_SERIES_FK = NGR_OID " +
			"JOIN NGD_PROTOCOL ON NGS_PROTOCOL_FK=NGP_OID JOIN ISH_PERSON ON PER_OID = SUB_PI_FK JOIN ISH_SP_TISSUE ON IST_SUBMISSION_FK=SUB_OID " +
			"JOIN REF_STAGE ON STG_OID = SUB_STAGE_FK " +
			"JOIN ANA_TIMED_NODE ON ATN_PUBLIC_ID=IST_COMPONENT JOIN ANA_NODE ON ATN_NODE_FK = ANO_OID  LEFT JOIN LNK_SUB_ALLELE ON SAL_SUBMISSION_FK = SUB_OID " +
			"LEFT JOIN ISH_ALLELE ON SAL_ALE_OID_FK = ALE_OID " +
			"%s " +
			"SUB_ASSAY_TYPE = ? %s AND " + GenericQueries.PUBLIC_ENTRIES +
			"GROUP BY SUB_ACCESSION_ID  " +
			"ORDER BY %s %s, NATURAL_SORT(SUB_ACCESSION_ID) LIMIT ?, ?";
	
	//"ORDER BY natural_sort(NGS_GEO_ID)  ASC , NATURAL_SORT(SUB_ACCESSION_ID)";
	//"SUB_ASSAY_TYPE = 'NextGen'
	
	/*public final static String TOTAL_SEQUENCE_SAMPLE = "SELECT COUNT(DISTINCT SUB_ACCESSION_ID) TOTAL FROM ISH_SUBMISSION  " +
			"WHERE SUB_ASSAY_TYPE = ? AND " +GenericQueries.PUBLIC_ENTRIES;*/
	
	public final static String TOTAL_SEQUENCE_SAMPLE = " SELECT COUNT(DISTINCT SUB_ACCESSION_ID) TOTAL FROM ISH_SUBMISSION JOIN NGD_SAMPLE ON NGS_SUBMISSION_FK = SUB_OID " +
			"JOIN NGD_SAMPLE_SERIES ON NGL_SAMPLE_FK = NGS_OID JOIN NGD_SERIES ON NGL_SERIES_FK = NGR_OID JOIN REF_STAGE ON STG_OID = SUB_STAGE_FK " +
			"WHERE SUB_ASSAY_TYPE = ? %s AND " +GenericQueries.PUBLIC_ENTRIES;
	
	public final static String TOTAL_NUMBER_OF_NGSEQUENCES = "SELECT COUNT(DISTINCT SUB_OID) TOTAL FROM ISH_SUBMISSION " +
			  						 "join REF_STAGE on STG_OID = SUB_STAGE_FK " +
			  						 "WHERE SUB_ASSAY_TYPE = 'NextGen' AND " +GenericQueries.PUBLIC_ENTRIES;
	
	public final static String SEQ_SERIES="SELECT NGR_GEO_ID geo_series_id, COUNT(distinct NGL_SAMPLE_FK) num_samples, NGR_TITLE title, NGR_SUMMARY summary, " +
			"NGR_OVERALL_DESIGN overall_design, SUB_ARCHIVE_ID archive_id, SUB_BATCH batch_id, NGR_OID series_oid " +
			"FROM NGD_SERIES, NGD_SAMPLE_SERIES, NGD_SAMPLE, ISH_SUBMISSION " +
			"WHERE " +
			"NGR_OID = ? AND NGL_SERIES_FK = NGR_OID AND NGL_SAMPLE_FK = NGS_OID AND NGS_SUBMISSION_FK = SUB_OID";
	
	public final static String SEQUENCE_SUPPLEMENTARY_FILES = "SELECT DISTINCT NGF_FILEPATH,NGF_FILENAME, NGF_RAW, NGF_FILESIZE " +
            "FROM NGD_FILES " +
            "JOIN NGD_SAMPLE ON NGF_SAMPLE_FK=NGS_OID " +
            "JOIN ISH_SUBMISSION ON NGS_SUBMISSION_FK = SUB_OID AND SUB_OID = ?";
	
	public final static String SEQUENCE_SINGLE_SAMPLE = "SELECT NGS_GEO_ID, NGS_DESCRIPTION, NGS_SAMPLE_NAME, NGS_SPECIES, NGS_STRAIN, NGS_GENOTYPE, " +
    		"NGS_SEX, CASE WHEN NGS_STAGE_FORMAT='dpc' THEN CONCAT(NGS_DEV_STAGE,NGS_STAGE_FORMAT) ELSE CONCAT(NGS_STAGE_FORMAT,NGS_DEV_STAGE) END age, " +
    		"SUB_EMBRYO_STG, NGS_POOLED_SAMPLE, NGS_POOL_SIZE, NGS_EXPERIMENTAL_METHOD, NGS_SAMPLE_NOTES, " +
    		"NGS_LIBRARY_POOL_SIZE, NGS_LIBRARY_READS, NGS_READ_LENGTH, NGS_MEAN_INSERT_SIZE " +
    		"FROM NGD_SAMPLE " +
    		"JOIN ISH_SUBMISSION ON NGS_SUBMISSION_FK = SUB_OID " +
    		"WHERE SUB_OID= ? ";
	
	public final static String SEQUENCE_SINGLE_SERIES = "SELECT NGR_GEO_ID geo_series_id, NGR_TITLE title, NGR_SUMMARY summary, NGR_CREATED_BY created_by, NGR_OVERALL_DESIGN overall_design, NGR_OID series_oid " +
            "FROM NGD_SERIES, NGD_SAMPLE_SERIES, NGD_SAMPLE, ISH_SUBMISSION " +
            "WHERE SUB_OID = ? " +
            "AND SUB_OID=NGS_SUBMISSION_FK " +
            "AND NGL_SAMPLE_FK=NGS_OID " +
            "AND NGL_SERIES_FK = NGR_OID";
	
	public final static String SEQUENCE_NUM_SAMPLES = "SELECT COUNT(NGL_SAMPLE_FK) total " +
            "FROM NGD_SERIES, NGD_SAMPLE_SERIES, NGD_SAMPLE " +
            "WHERE NGL_SAMPLE_FK=NGS_OID " +
            "AND NGL_SERIES_FK = NGR_OID " +
            "AND NGR_OID IN" +
            " (SELECT NGR_OID " +
            "  FROM NGD_SERIES, NGD_SAMPLE_SERIES, NGD_SAMPLE, ISH_SUBMISSION " +
            "  WHERE SUB_OID= ? " +
            "  AND SUB_OID=NGS_SUBMISSION_FK " +
            "  AND NGL_SAMPLE_FK=NGS_OID " +
            "  AND NGL_SERIES_FK = NGR_OID)";
			
	public final static String SEQUENCE_DATA_PROCESSING = "SELECT NGC_PRO_STEP, NGC_BUILD, NGC_ALIGNED_GENOME, NGC_UNALIGNED_GENOME, NGC_RNA_READS, NGC_5_3_RATIO, " +
    		"NGC_FORMAT_CONTENT,NGF_NUMBER_OF_READS, NGF_BEFORE_CLEAN_UP_READS, NGF_PAIRED_END, NGF_FILENAME, NGF_FILETYPE, NGF_RAW " +
    		"FROM ISH_SUBMISSION " +
    		"JOIN NGD_SAMPLE ON NGS_SUBMISSION_FK = SUB_OID " +
    		"JOIN NGD_FILES ON NGF_SAMPLE_FK = NGS_OID " +
    		"LEFT OUTER JOIN NGD_DATA_PROCESSING ON NGC_FILE_FK=NGF_OID " +
    		"WHERE SUB_OID = ? " +
    		"ORDER BY NGF_RAW DESC, NGF_OID ASC ";
	
	public final static String SEQUENCE_PROTOCOL = "SELECT NGP_NAME, NGP_LIBRARY_CON_PROT, NGP_LIBRARY_STRATEGY, NGP_EXTRACTED_MOLECULE, NGP_RNA_ISOLATION_METHOD, NGP_SEQUENCING_METHOD, " +
    		"NGP_LABEL_METHOD,NGP_INSTRUMENT_MODEL, " +
    		"NGP_PAIRED_END, NGP_PROT_ADDITIONAL_NOTES, NGP_DNA_EXTRACT_METHOD, NGP_ANTIBODY, CONCAT(USR_FORENAME,' ',USR_SURNAME) CREATED_BY " +
    		"FROM NGD_PROTOCOL " +
    		"JOIN NGD_SAMPLE ON NGS_PROTOCOL_FK = NGP_OID " +
    		"JOIN ISH_SUBMISSION ON NGS_SUBMISSION_FK = SUB_OID " +
    		"JOIN REF_USER ON USR_OID=NGP_CREATED_BY " +
    		"WHERE SUB_OID = ? ";
	
}	